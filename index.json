[{"categories":["Tossing"],"content":"我不想让我的 OnePlus 5T 变成一个摆设, 所以我想折腾一下. 让他发挥余力. The phone was running on Android 10, and I would like to upgrade it to Android 13. Luckily, there is a project called Project Elixir that provides Android 13 ROM for OnePlus 5T. ","date":"2023-02-02","objectID":"/toss-oneplus-5t/:0:0","series":[],"tags":["Android"],"title":"折腾 OnePlus 5T","uri":"/toss-oneplus-5t/#"},{"categories":["Tossing"],"content":"Project ElixirXDA. Dumpling is the codename for the OnePlus 5T. Download the ROM from here: ProjectElixir Downloads ","date":"2023-02-02","objectID":"/toss-oneplus-5t/:1:0","series":[],"tags":["Android"],"title":"折腾 OnePlus 5T","uri":"/toss-oneplus-5t/#project-elixir"},{"categories":["Tossing"],"content":"RecoveryOrangeFox Recovery Project ","date":"2023-02-02","objectID":"/toss-oneplus-5t/:2:0","series":[],"tags":["Android"],"title":"折腾 OnePlus 5T","uri":"/toss-oneplus-5t/#recovery"},{"categories":["Tossing"],"content":"Recovery FlashingFollow the installation instructions on the lineageOS wiki: Install LineageOS on dumpling In the fastboot mode, you can use the following command to check if your device is connected: fastboot devices If nothing shows up, follow the instructions from XDA to fix the issue. ","date":"2023-02-02","objectID":"/toss-oneplus-5t/:3:0","series":[],"tags":["Android"],"title":"折腾 OnePlus 5T","uri":"/toss-oneplus-5t/#recovery-flashing"},{"categories":["Tossing"],"content":"MagiskMagisk ","date":"2023-02-02","objectID":"/toss-oneplus-5t/:4:0","series":[],"tags":["Android"],"title":"折腾 OnePlus 5T","uri":"/toss-oneplus-5t/#magisk"},{"categories":["Tossing"],"content":"LSPosedLSPosed ","date":"2023-02-02","objectID":"/toss-oneplus-5t/:5:0","series":[],"tags":["Android"],"title":"折腾 OnePlus 5T","uri":"/toss-oneplus-5t/#lsposed"},{"categories":["Tossing"],"content":"Google CameraThe built-in google camera app is not working. Use NGCam_8.2.300-v1.8_snap.apk instead. To load XML configs, see this. You will also need to install OnePlus 5/5T Front Camera Fix (V6.3). ","date":"2023-02-02","objectID":"/toss-oneplus-5t/:6:0","series":[],"tags":["Android"],"title":"折腾 OnePlus 5T","uri":"/toss-oneplus-5t/#google-camera"},{"categories":["Tricks"],"content":"老是忘记的分割窗口的快捷键, 所以记录一下. alt + shift + + 增加左右分割画面 alt + shift + - 增加上下分割画面 alt + ← 或 → 移动焦点画面 ctrl + shift + W 关闭这个小分割窗格 ","date":"2023-01-30","objectID":"/windows-terminal-splitting-shorcuts/:0:0","series":[],"tags":["Windows Terminal"],"title":"Windows Terminal 分割快捷键","uri":"/windows-terminal-splitting-shorcuts/#"},{"categories":["Tricks"],"content":"Some basics about Git and GitHub. 其实上网一搜到处都有, 但还是记录一下, 方便自己查阅. ","date":"2023-01-25","objectID":"/github_basics/:0:0","series":[],"tags":["Git, GitHub"],"title":"Git Basics","uri":"/github_basics/#"},{"categories":["Tricks"],"content":"Some References Git and GitHub (Concise) Git 与代码管理 (Good!) ","date":"2023-01-25","objectID":"/github_basics/:1:0","series":[],"tags":["Git, GitHub"],"title":"Git Basics","uri":"/github_basics/#some-references"},{"categories":["Tricks"],"content":"Configure Git git config --global user.name \"Your Name Here\" git config --global user.email \"your_email@youremail.com\" ","date":"2023-01-25","objectID":"/github_basics/:2:0","series":[],"tags":["Git, GitHub"],"title":"Git Basics","uri":"/github_basics/#configure-git"},{"categories":["Tricks"],"content":"Git Clone git clone https://github.com/\u003cusername\u003e/\u003crepo-name\u003e.git # https git clone git@github.com:\u003cusername\u003e/\u003crepo-name\u003e.git # SSH ","date":"2023-01-25","objectID":"/github_basics/:3:0","series":[],"tags":["Git, GitHub"],"title":"Git Basics","uri":"/github_basics/#git-clone"},{"categories":["Tricks"],"content":"SSH Config for GitHub","date":"2023-01-25","objectID":"/github_basics/:4:0","series":[],"tags":["Git, GitHub"],"title":"Git Basics","uri":"/github_basics/#ssh-config-for-github"},{"categories":["Tricks"],"content":"Check for existing SSH keysFirst check for existing SSH keys on your computer by running: ls -al ~/.ssh # Lists the files in your .ssh directory, if they exist Check the directory listing to see if you have files named either id_rsa.pub or id_dsa.pub. If you don’t have either of those files then read on, otherwise skip the next section. ","date":"2023-01-25","objectID":"/github_basics/:4:1","series":[],"tags":["Git, GitHub"],"title":"Git Basics","uri":"/github_basics/#check-for-existing-ssh-keys"},{"categories":["Tricks"],"content":"Generate a new SSH key Open Terminal. Paste the text below, substituting in your GitHub email address. This creates a new ssh key, using the provided email as a label. ssh-keygen -t ed25519 -C \"your_email@example.com\" ","date":"2023-01-25","objectID":"/github_basics/:4:2","series":[],"tags":["Git, GitHub"],"title":"Git Basics","uri":"/github_basics/#generate--a-new-ssh-key"},{"categories":["Tricks"],"content":"Add your SSH key to the ssh-agent Start the ssh-agent in the background. eval \"$(ssh-agent -s)\" Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file. ssh-add ~/.ssh/id_ed25519 ","date":"2023-01-25","objectID":"/github_basics/:4:3","series":[],"tags":["Git, GitHub"],"title":"Git Basics","uri":"/github_basics/#add--your-ssh-key-to-the-ssh-agent"},{"categories":["Tricks"],"content":"Test SSH connection ssh -T git@github.com ","date":"2023-01-25","objectID":"/github_basics/:4:4","series":[],"tags":["Git, GitHub"],"title":"Git Basics","uri":"/github_basics/#test-ssh-connection"},{"categories":["Tricks"],"content":"Add a new SSH key to your GitHub accountSee GitHub documents ","date":"2023-01-25","objectID":"/github_basics/:4:5","series":[],"tags":["Git, GitHub"],"title":"Git Basics","uri":"/github_basics/#add-a-new-ssh-key-to-your-github-account"},{"categories":["Tricks"],"content":"快捷键总结抄袭一些 VSCode 的快捷键 最常用的应该就是Ctrl + Shift + P了，这个是打开命令面板的快捷键，可以通过命令面板来执行各种操作. ","date":"2021-08-17","objectID":"/vscode_shortcuts/:1:0","series":[],"tags":["VSCode"],"title":"VSCode 技巧","uri":"/vscode_shortcuts/#快捷键"},{"categories":["Tricks"],"content":"⭐ 智能感知 Ctrl + Space 触发\"建议\"小部件 Alt + \\ 触发 Github Copilot 默认情况下，Tab 或 Enter 表示接受当前选项 ","date":"2021-08-17","objectID":"/vscode_shortcuts/:1:1","series":[],"tags":["VSCode"],"title":"VSCode 技巧","uri":"/vscode_shortcuts/#-智能感知"},{"categories":["Tricks"],"content":"⭐ 文件和文件夹 打开关闭边栏 Ctrl+B 禅模式 Ctrl + K, Z 进入无干扰的禅模式；按两次 Esc 退出 快速打开文件 Ctrl + P 可以搜索 ","date":"2021-08-17","objectID":"/vscode_shortcuts/:1:2","series":[],"tags":["VSCode"],"title":"VSCode 技巧","uri":"/vscode_shortcuts/#-文件和文件夹"},{"categories":["Tricks"],"content":"⭐ 编辑技巧 当然这些操作都可以通过 菜单 👉 选择 来进行操作 多光标修饰符 多光标修饰符是用来设置我们如果配合鼠标单击来添加多个光标。 比如，当我们可以通过 Alt + 单击 添加多个光标时, Alt 键就是多光标修饰符 插入多个光标后, 可以同时移动或者选择 通用操作 Ctrl + C, 复制当前文本 Ctrl + V, 粘贴当前文本 Ctrl + Z, 撤销 Ctrl + Shift + Z, 反撤销 Shift + Alt + F, Format Document Ctrl + /, 将当前行注释 / 反注释, 当多行文本被选中时, 将多行文本注释 光标移动 Ctrl + ← 将光标向左移动一个单词 Ctrl + → 将光标向右移动一个单词 光标操作 Ctrl + Alt + ↑, 向上加入一个光标 Ctrl + Alt + ↓, 向下加入一个光标 Ctrl + U, 撤销上次光标操作 界面移动 Ctrl + ↑ 向上移动当前界面 Ctrl + ↓ 向下移动当前界面 Alt 键可在编辑器和资源管理器中（5 倍）快速滚动 选中操作 Shift + ← 向左选中 / 反选中一个字符 (重要) Shift + → 向右选中 / 反选中一个字符 (重要) Ctrl + Shift + ← 向左选中 / 反选中一个单词 (重要) Ctrl + Shift + → 向右选中 / 反选中一个单词 (重要) Ctrl + D 当前有选中文本时, 将下一个与其相同的文本加入选中 (重要) Ctrl + L 选择当前行 Ctrl + Shift + L: 选中文件中所有相同的字符串 Shift+Alt+鼠标拖动 列(框)选 Shift + Alt + Right 扩大选中区域 Shift + Alt + Left 缩小当前选择 文本行操作 Ctrl + C 当前无选中文本时, 复制当前行 Shift + Alt + ↑ 向上复制当前行, 当多行文本被选中时, 向上复制多行 (重要) Shift + Alt + ↓ 向下复制当前行, 当多行文本被选中时, 向下复制多行 (重要) Alt + ↑ 向上移动当前行, 当多行文本被选中时, 将当前多行文本向上移动 (重要) Alt + ↓向下移动当前行, 当多行文本被选中时, 将当前多行文本向下移动 (重要) Ctrl+Enter 在当前行下边插入一行 Ctrl+Shift+Enter 在当前行上方插入一行 导航到特定行 Ctrl + G 导航到文件的开头和结尾 Ctrl + Home 和 Ctrl + End 括号匹配 Windows / Linux: ctrl+shift+\\ ","date":"2021-08-17","objectID":"/vscode_shortcuts/:1:3","series":[],"tags":["VSCode"],"title":"VSCode 技巧","uri":"/vscode_shortcuts/#-编辑技巧"},{"categories":["Academic"],"content":"Liquid Crystals in FDTD simulation ","date":"2021-08-16","objectID":"/fdtd_lc/:0:0","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#"},{"categories":["Academic"],"content":"general work flow grid attribute object defines a transform $U$ to diagonalize the permittivity. $U$ is often a simple rotation matrix. in the material database, create a diagonal anisotropic material on the material tab of a structure object, select the defined diagonal anisotropic material link the LC grid attribute to the object( grid attribute property) ","date":"2021-08-16","objectID":"/fdtd_lc/:1:0","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#general-work-flow"},{"categories":["Academic"],"content":"LC rotationThe Liquid crystal (LC) rotation grid attribute allows you to specify a spatially varying LC director orientation in terms of $\\theta$, $\\phi$. LC director orientation\" LC director orientation Liquid crystals are composed of rod-like molecular structures which have rotational symmetry with respect to a long axis. Therefore, liquid crystals have spatially varying uni-axial optical properties. The refractive indices with respect to the long and short molecular axes are called extraordinary $n_e$ and ordinary $n_o$ respectively, see figure above. Rotational symmetry allows the transformation matrix to reduced to a function of two rotational angles ($\\theta$, $\\phi$). KaTex Tip \\begin{aligned} can’t be on its own line. Nor can \\end{aligned}. You need to use four \\s instead of two because they need to be escaped. You must have a trailing space at the end of those four \\s. $$ \\mathbf{U} = U_z U_y = \\begin{bmatrix} \\cos\\phi \u0026 -\\sin\\phi\u0026 0 \\\\ \\sin\\phi \u0026 \\cos\\phi \u0026 0 \\\\ 0 \u0026 0 \u0026 1 \\end{bmatrix} \\begin{bmatrix} \\cos\\theta \u0026 0 \u0026 \\sin\\theta \\\\ 0 \u0026 1 \u0026 0 \\\\ -\\sin\\theta \u0026 0 \u0026 \\cos\\theta \\end{bmatrix} = \\begin{bmatrix} \\cos\\theta \\cos\\phi \u0026 -\\sin\\theta \u0026 \\sin\\theta \\sin\\phi \\\\ \\cos\\theta \\sin\\phi \u0026 \\cos\\phi \u0026 \\sin\\theta \\sin\\phi \\\\ -\\sin\\theta \u0026 0 \u0026 \\cos\\theta \\end{bmatrix} $$ and the permittivity tensor in the reference (or simulation ) coordinate system $(x,y,z)$ is transformed to the principal coordinate system $(X,Y,Z)$ via a rotation about $z$, and the $y$. we have the transform relation: $$\\begin{bmatrix} X\\\\ Y\\\\ Z \\end{bmatrix} = U(\\theta, \\phi) \\begin{bmatrix} x\\\\ y\\\\ z \\end{bmatrix} $$ and the permittivity in two coordinate systems $$\\mathbf{\\tilde \\varepsilon}_D =U^\\ast(\\theta,\\phi)\\tilde\\varepsilon U(\\theta,\\phi)$$ where $$ \\tilde\\varepsilon_{D}= \\begin{bmatrix} \\varepsilon_0 \u00260\u0026 0 \\\\ 0\u0026 \\varepsilon_0 \u0026 0 \\\\ 0 \u0026 0 \u0026 \\varepsilon_0 \\end{bmatrix}=\\begin{bmatrix} n_0^2 \u00260\u0026 0 \\\\ 0\u0026 n_0^2 \u0026 0 \\\\ 0 \u0026 0 \u0026 n_e^2\\end{bmatrix} $$ is the permittivity in the principle coordinate system $(X,Y,Z)$. ","date":"2021-08-16","objectID":"/fdtd_lc/:2:0","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#lc-rotation"},{"categories":["Academic"],"content":"Uniform distributionIt is quite simple. In LC attribute object, set the properties “theta” and ‘phi\". ","date":"2021-08-16","objectID":"/fdtd_lc/:3:0","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#uniform-distribution"},{"categories":["Academic"],"content":"Spatially varying orientation distribution of LCs","date":"2021-08-16","objectID":"/fdtd_lc/:4:0","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#spatially-varying-orientation-distribution-of-lcs"},{"categories":["Academic"],"content":"Importing data using the script environmentIn this case, we can use the addgridattribute , and optionally the importdataset script command to add the LC attribute and to set the spatially varying LC orientation. For example, if we want to set up LCs which are twisted in z direction as shown below, where the components of the LC director are given by $$\\begin{align*}u_{x}(x,y,z) \u0026=\\cos(\\pi z) \\\\ u_{y}(x,y,z) \u0026=\\sin(\\pi z) \\\\ u_{z}(x,y,z) \u0026=0\\end{align*}$$ # %matplotlib widget # %matplotlib widget %matplotlib inline %config InlineBackend.figure_format = 'svg' # %config InlineBackend.figure_format = 'retina' import matplotlib.pyplot as plt from mpl_toolkits.mplot3d.proj3d import proj_transform from mpl_toolkits.mplot3d.axes3d import Axes3D import numpy as np from matplotlib.patches import FancyArrowPatch class Arrow3D(FancyArrowPatch): def __init__(self, x, y, z, dx, dy, dz, *args, **kwargs): super().__init__((0, 0), (0, 0), *args, **kwargs) self._xyz = (x, y, z) self._dxdydz = (dx, dy, dz) def draw(self, renderer): x1, y1, z1 = self._xyz dx, dy, dz = self._dxdydz x2, y2, z2 = (x1 + dx, y1 + dy, z1 + dz) xs, ys, zs = proj_transform((x1, x2), (y1, y2), (z1, z2), self.axes.M) self.set_positions((xs[0], ys[0]), (xs[1], ys[1])) super().draw(renderer) def _arrow3D(ax, x, y, z, dx, dy, dz, *args, **kwargs): '''Add an 3d arrow to an `Axes3D` instance.''' arrow = Arrow3D(x, y, z, dx, dy, dz, *args, **kwargs) ax.add_artist(arrow) setattr(Axes3D, 'arrow3D', _arrow3D) def LC_twist_z_axis(): with plt.style.context(['science', 'notebook']): fig = plt.figure(dpi = 100) ax = plt.axes(projection='3d') # Make the grid x, y, z = np.meshgrid(0, 0, np.arange(0, 4, 0.03)) # Make the direction data for the arrows ux = np.cos(np.pi * z) uy = np.sin(np.pi * z) uz = np.zeros(z.shape) ax.quiver(x, y, z, ux, uy, uz, length = 0.05, arrow_length_ratio = 0, pivot = 'middle', normalize = True, colors = 'red', alpha = 0.3, linestyles = 'solid') ax.arrow3D(0,0,-0.25,0,-0.05,0, mutation_scale= 30, arrowstyle=\"-|\u003e\", linestyle='solid', color = 'green', alpha = 0.4, linewidth = 5) ax.arrow3D(0,0,-0.25,0.05,0,0, mutation_scale= 30, arrowstyle=\"-|\u003e\", linestyle='solid', color = 'green', alpha = 0.4, linewidth = 5) ax.arrow3D(0,0,-0.25,0,0,7, mutation_scale= 30, arrowstyle=\"-|\u003e\", linestyle='solid', color = 'green', alpha = 0.4, linewidth = 5) ax.grid(False) ax.axis(False) ax.view_init(elev=45, azim=-45) plt.show() LC_twist_z_axis() LC directors twisted along z-axis\" LC directors twisted along z-axis we define the director distribution in a matrix variable and put the matrix into the LC attribute property. In the following script, matrix “n” is used to define the director distribution of the twisted nematic LCs, and this information is put into a dataset called LC which contains the x, y, z position data and the director orientations in an attribute called “u”. At the second last line where addgridattribute command is used, a LC attribute is added to the simulation and the director distribution is set up. Note : Magnitude of spatially varying orientation unit vector When specifying the LC orientation, it is important that the magnitude of the orientation vector be exactly 1, except in regions where you don’t want the LC orientation to be set where the magnitude of the vector should be set to 0. # define x/y/z x = 0; y = 0; z = linspace(0e-6,5e-6,100); X = meshgrid3dx(x,y,z); Y = meshgrid3dy(x,y,z); Z = meshgrid3dz(x,y,z); n = matrix(length(x),length(y),length(z),3); # define the orientation function n(1:length(x),1:length(y),1:length(z),1) = cos(Z*pi*1e5); n(1:length(x),1:length(y),1:length(z),2) = sin(Z*pi*1e5); n(1:length(x),1:length(y),1:length(z),3) = 0; # create dataset containing orientation vectors and position parameters LC=rectilineardataset(\"LC\",x,y,z); LC.addattribute(\"u\",n); # add LC import grid attribute addgridattribute(\"lc orientation\",LC); setnamed(\"LC attribute\",\"nz\",50); # set resolution Note : When setting angle theta via ‘set’ script command, the inpu","date":"2021-08-16","objectID":"/fdtd_lc/:4:1","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#importing-data-using-the-script-environment"},{"categories":["Academic"],"content":"Importing data using the script environmentIn this case, we can use the addgridattribute , and optionally the importdataset script command to add the LC attribute and to set the spatially varying LC orientation. For example, if we want to set up LCs which are twisted in z direction as shown below, where the components of the LC director are given by $$\\begin{align*}u_{x}(x,y,z) \u0026=\\cos(\\pi z) \\\\ u_{y}(x,y,z) \u0026=\\sin(\\pi z) \\\\ u_{z}(x,y,z) \u0026=0\\end{align*}$$ # %matplotlib widget # %matplotlib widget %matplotlib inline %config InlineBackend.figure_format = 'svg' # %config InlineBackend.figure_format = 'retina' import matplotlib.pyplot as plt from mpl_toolkits.mplot3d.proj3d import proj_transform from mpl_toolkits.mplot3d.axes3d import Axes3D import numpy as np from matplotlib.patches import FancyArrowPatch class Arrow3D(FancyArrowPatch): def __init__(self, x, y, z, dx, dy, dz, *args, **kwargs): super().__init__((0, 0), (0, 0), *args, **kwargs) self._xyz = (x, y, z) self._dxdydz = (dx, dy, dz) def draw(self, renderer): x1, y1, z1 = self._xyz dx, dy, dz = self._dxdydz x2, y2, z2 = (x1 + dx, y1 + dy, z1 + dz) xs, ys, zs = proj_transform((x1, x2), (y1, y2), (z1, z2), self.axes.M) self.set_positions((xs[0], ys[0]), (xs[1], ys[1])) super().draw(renderer) def _arrow3D(ax, x, y, z, dx, dy, dz, *args, **kwargs): '''Add an 3d arrow to an `Axes3D` instance.''' arrow = Arrow3D(x, y, z, dx, dy, dz, *args, **kwargs) ax.add_artist(arrow) setattr(Axes3D, 'arrow3D', _arrow3D) def LC_twist_z_axis(): with plt.style.context(['science', 'notebook']): fig = plt.figure(dpi = 100) ax = plt.axes(projection='3d') # Make the grid x, y, z = np.meshgrid(0, 0, np.arange(0, 4, 0.03)) # Make the direction data for the arrows ux = np.cos(np.pi * z) uy = np.sin(np.pi * z) uz = np.zeros(z.shape) ax.quiver(x, y, z, ux, uy, uz, length = 0.05, arrow_length_ratio = 0, pivot = 'middle', normalize = True, colors = 'red', alpha = 0.3, linestyles = 'solid') ax.arrow3D(0,0,-0.25,0,-0.05,0, mutation_scale= 30, arrowstyle=\"-|\", linestyle='solid', color = 'green', alpha = 0.4, linewidth = 5) ax.arrow3D(0,0,-0.25,0.05,0,0, mutation_scale= 30, arrowstyle=\"-|\", linestyle='solid', color = 'green', alpha = 0.4, linewidth = 5) ax.arrow3D(0,0,-0.25,0,0,7, mutation_scale= 30, arrowstyle=\"-|\", linestyle='solid', color = 'green', alpha = 0.4, linewidth = 5) ax.grid(False) ax.axis(False) ax.view_init(elev=45, azim=-45) plt.show() LC_twist_z_axis() LC directors twisted along z-axis\" LC directors twisted along z-axis we define the director distribution in a matrix variable and put the matrix into the LC attribute property. In the following script, matrix “n” is used to define the director distribution of the twisted nematic LCs, and this information is put into a dataset called LC which contains the x, y, z position data and the director orientations in an attribute called “u”. At the second last line where addgridattribute command is used, a LC attribute is added to the simulation and the director distribution is set up. Note : Magnitude of spatially varying orientation unit vector When specifying the LC orientation, it is important that the magnitude of the orientation vector be exactly 1, except in regions where you don’t want the LC orientation to be set where the magnitude of the vector should be set to 0. # define x/y/z x = 0; y = 0; z = linspace(0e-6,5e-6,100); X = meshgrid3dx(x,y,z); Y = meshgrid3dy(x,y,z); Z = meshgrid3dz(x,y,z); n = matrix(length(x),length(y),length(z),3); # define the orientation function n(1:length(x),1:length(y),1:length(z),1) = cos(Z*pi*1e5); n(1:length(x),1:length(y),1:length(z),2) = sin(Z*pi*1e5); n(1:length(x),1:length(y),1:length(z),3) = 0; # create dataset containing orientation vectors and position parameters LC=rectilineardataset(\"LC\",x,y,z); LC.addattribute(\"u\",n); # add LC import grid attribute addgridattribute(\"lc orientation\",LC); setnamed(\"LC attribute\",\"nz\",50); # set resolution Note : When setting angle theta via ‘set’ script command, the inpu","date":"2021-08-16","objectID":"/fdtd_lc/:4:1","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#realizaton-in-python"},{"categories":["Academic"],"content":"Importing data from .mat file using the graphical user interfaceIn the edit window of the grid attribute, it is possible to import a .mat file containing a dataset with the required director distribution data by clicking on the “Import data…” button. The following code shows an example of how to save a .mat file to be imported by using the matlabsave script command. # define x/y/z x = 0; y = 0; z = linspace(0e-6,5e-6,100); X = meshgrid3dx(x,y,z); Y = meshgrid3dy(x,y,z); Z = meshgrid3dz(x,y,z); n = matrix(length(x),length(y),length(z),3); # define the orientation function n(1:length(x),1:length(y),1:length(z),1) = cos(Z*pi*1e5); n(1:length(x),1:length(y),1:length(z),2) = sin(Z*pi*1e5); n(1:length(x),1:length(y),1:length(z),3) = 0; # create dataset containing orientation vectors and position parameters LC=rectilineardataset(\"LC\",x,y,z); LC.addattribute(\"u\",n); # save data to .mat file matlabsave(\"LC_import.mat\",LC); We then add a material with diagonal anisotropy components and set up the object to use the LC attribute similarly to the case of uniform distribution. ","date":"2021-08-16","objectID":"/fdtd_lc/:4:2","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#importing-data-from-mat-file-using-the-graphical-user-interface"},{"categories":["Academic"],"content":"Importing data from a CSV (comma-separated values) fileFrom the Import menu in the top toolbar, click on Import from CSV to open the import wizard which allows you to select the CSV file to import. This file is typically created with TechWiz LCD from Sanayi System Co., Ltd (http://sanayisystem.com/). For more details on the file format and steps for importing the data from the graphical wizard, see Import object - Liquid crystal from CSV. The same data can also be imported using the importcsvlc script command. ","date":"2021-08-16","objectID":"/fdtd_lc/:4:3","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#importing-data-from-a-csv-comma-separated-values-file"},{"categories":["Academic"],"content":"Package Version import sys from typing import List from importlib.metadata import metadata import IPython.display as IPd def notebook_manifest(*packages: List[str] ) -\u003e str: manifest = [ '| Component | Version | Description |', '| --------------------------------- | -------------------------- | -------------------- |', f'| [Python](https://www.python.org/) | {sys.version.split()[0]}| Programming Language |' ] sorted_packages = [*packages]; # convert arguments to a list sorted_packages.sort() for p in sorted_packages: # build the markdown table of module metadata try: meta = {k: v for k, v in metadata(p).items()} manifest.append( f'| [{meta[\"Name\"]}]({meta[\"Home-page\"]}) | {meta[\"Version\"]}| {meta[\"Summary\"]}|') except: manifest.append( f'| {p}| ? | **Unrecognized module!** |') return IPd.Markdown('\\n'.join(manifest)) display(IPd.Markdown('**Packages used in This Notebook**')) notebook_manifest('jupyterlab', 'numpy', 'matplotlib', 'scipy') ","date":"2021-08-16","objectID":"/fdtd_lc/:5:0","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#package-version"},{"categories":["Academic"],"content":"Packages used in This Notebook Component Version Description Python 3.9.6 Programming Language jupyterlab 3.0.14 The JupyterLab server extension. matplotlib 3.4.2 Python plotting package numpy 1.20.3 NumPy is the fundamental package for array computing with Python. scipy 1.6.2 SciPy: Scientific Library for Python ","date":"2021-08-16","objectID":"/fdtd_lc/:5:1","series":["FDTD"],"tags":["LC","Python"],"title":"FDTD Liquid Crystals","uri":"/fdtd_lc/#packages-used-in-this-notebook"},{"categories":["Academic"],"content":"FDTD basics, Python scripts controlling Lumerical. ","date":"2021-08-16","objectID":"/fdtd_basics/:0:0","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#"},{"categories":["Academic"],"content":"Solver PhysicsIn three dimensions, Maxwell equations have six electromagnetic field components: Ex, Ey, Ez and Hx, Hy, and Hz. If we assume that the structure is infinite in the z dimension and that the fields are independent of z, then Maxwell’s equations split into two independent sets of equations composed of three vector quantities each which can be solved in the x-y plane only. These are termed the TE (transverse electric), and TM (transverse magnetic) equations. We can solve both sets of equations with the following components: TE: Ex, Ey, Hz TM: Hx, Hy, Ez ","date":"2021-08-16","objectID":"/fdtd_basics/:1:0","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#solver-physics"},{"categories":["Academic"],"content":"Impulse responseFDTD solves for the electric field and magnetic field as a function of time. the solver calculates $\\vec{E}\\left(t\\right)$ and $\\vec{H}\\left(t\\right)$ but, in general, what we want is field as a function of frequency or wavelength $\\vec{E}\\left(\\omega\\right)$ poynting vector, transmission, reflection time domain-\u003efreqency domain? Fourier Transform! In linear systems, the impulse response of the system: $$\\vec{E}\\left(\\omega\\right)=\\frac{1}{s\\left(\\omega\\right)}\\int_{0}^{t_{sim}}e^{i\\omega t}\\vec{E}\\left(t\\right)dt$$ where $$s\\left(\\omega\\right)=\\int_{0}^{t_{source}}e^{i\\omega t}\\vec{s}\\left(t\\right)dt$$ is the fourier transform of the source pulse. It should be independent of the source pulse used in linear optics system (no nonlinearity is considered here). Ideally, $s\\left(\\omega\\right)=1$ and $s\\left(t\\right)$ is a Dirac delta function $t_{sim}$ should be long enough. with impulse response $\\vec{E}\\left(\\omega\\right)$, $\\vec{H}\\left(\\omega\\right)$ and $\\varepsilon\\left(\\omega\\right)$, one can calculate reflection, transmission, scattering cross sections, absorptions and much more Poynting Vector $$\\left\u003c\\vec{P}\\left(\\omega\\right)\\right\u003e_{t}=\\frac{1}{2}\\Re\\left[\\vec{E}\\left(\\omega\\right)\\times\\vec{H}^{*}\\left(\\omega\\right)\\right]$$ which is not a simple fourier transform of $\\vec{P}\\left(t\\right)$. Power $$Power\\left(\\omega\\right)=\\int_{S}\\left_{t}\\cdot d\\vec{S}$$ But we have the Parseval-Plancherel theorem $$\\int_{-\\infty}^{\\infty}\\vec{E}\\left(t\\right)\\times\\vec{H}^{*}\\left(t\\right) dt=\\frac{1}{2\\pi}\\int_{-\\infty}^{\\infty}\\vec{E}\\left(\\omega\\right)\\times\\vec{H}^{*}\\left(\\omega\\right) d\\omega$$ Transmission $$T\\left(\\omega\\right)=\\frac{\\int_{S}\\vec{P}\\left(\\omega\\right)\\cdot d\\vec{S}}{s\\left(\\omega\\right)}$$ ","date":"2021-08-16","objectID":"/fdtd_basics/:2:0","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#impulse-response"},{"categories":["Academic"],"content":"MODEGiven a cross section of a waveguide, the finite-difference eigenmode (FDE) solver calculates the spatial profile and frequency dependence of modes. It can provides us: mode field profile effective index loss TE and TM ratio combined with frequency sweep, one can calculate group delay, dispresion and etc applicable to bent waveguide The solver assumes the waveguide structure in the z direction is uniform, and the field can be expressed as: $$\\vec{E}\\left( x, y\\right)e^{i\\left(\\beta z-\\omega t\\right)}$$ $$\\vec{H}\\left( x, y\\right)e^{i\\left(\\beta z-\\omega t\\right)}$$ where $\\omega$ is the angular frequency and $\\beta$ is the propagation constant. Once the structure is meshed, the whole problem is converted to a matrix eigenvalue problem and solved by sparse matrix technique. It can be seen the physics convention $e^{i\\left(\\beta z-\\omega t\\right)}$ is adopted here. If $\\beta\u003e0$, the wave is propagating in the positive z direction. ","date":"2021-08-16","objectID":"/fdtd_basics/:3:0","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#mode"},{"categories":["Academic"],"content":"effective indexthe modal effective index is defined as $$n_{eff}=\\frac{c\\beta}{\\omega}$$ similar to the bulk index definition, except that geometric contributions are taken into account. Since the mode must be guided the effective index is bounded by the indices such that $$n_{\\text{max(sub,clad)}} \u003c n_{eff} \u003c n_{core}$$ ","date":"2021-08-16","objectID":"/fdtd_basics/:3:1","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#effective-index"},{"categories":["Academic"],"content":"loss (dB/m)An electric field propagating in the positive z-direction in a medium with a complex refractive index of $n+i\\kappa$ can be expressed as follows: $$E(z) = e^{i2\\pi(n+i\\kappa)z/\\lambda_0}$$ here, $k = 2\\pi(n+i\\kappa)/\\lambda_0$. The propagation loss in dB/m for a mode propagating in the z-direction is defined as $$loss = -10 \\log_{10}(\\frac{P(z)|_{z = \\ 1\\ m}}{P(z)|_{z = \\ 0\\ m}}) = -10 \\log_{10}(\\frac{|E(1)|^2}{|E(0)|^2})=-20 \\log_{10}(\\frac{|E(1)|}{|E(0)|})$$ Combining the formulas gives $$loss = -20 \\log_{10}(e^{-2\\pi\\kappa/\\lambda_0})$$ ","date":"2021-08-16","objectID":"/fdtd_basics/:3:2","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#loss-dbm"},{"categories":["Academic"],"content":"TE polarization fractionTwo definitions for polarization fractions are provided by MODE. The TE Polarization Fraction definition is typically used in integrated optics, but for fibers, this also helps to determine the polarization of the mode. The “TE polarization fraction Ex” for propagation along the z-direction is defined by the following equation: $$\\text{TE polarization fraction (Ex)} = \\frac{\\int |Ex|^2 dxdy}{\\int (|Ex|^2+|Ey|^2)dxdy}$$ where $|Ex|^2+|Ey|^2$ corresponds to $|E_{||}|^2$ (since we are considering the polarization of the modes, here we only consider the fields parallel to the mode cross section). In this case, if TE polarization fraction (Ex) = 100%, this mode is considered pure TE-polarized. In contrast, 0% refers to a pure TM-polarized mode. Note that some modes may not be perfectly polarized in one direction and in those cases you may find quasi-polarized modes in the Mode List. For propagation along the x direction, ie., “TE polarization fraction Ey”: $$\\text{TE polarization fraction (Ey)} = \\frac{\\int |Ey|^2 dydz}{\\int (|Ey|^2+|Ez|^2) dydz}$$ For propagation along the y direction, ie., “TE polarization fraction Ex”: $$\\text{TE polarization fraction (Ex)} =\\frac{\\int |Ex|^2 dxdz}{\\int (|Ex|^2+|Ez|^2) dxdz}$$ Note that this definition is arbitrary (since we allow for propagation in any direction), the user may have to look carefully at the field components if unusual orientations of the Eigenmode Solver are used. ","date":"2021-08-16","objectID":"/fdtd_basics/:3:3","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#te-polarization-fraction"},{"categories":["Academic"],"content":"Waveguide TE/TM FractionThere are alternative definitions that are used more frequently for other applications. The waveguide TE/TM fraction indicates the amount of E/H field in the direction of propagation. It is equal to the integrated transverse field intensity divided by the integrated total field intensity. A mode with a waveguide TE/TM fraction of 100%/100% is a TEM mode The “waveguide TE/TM fraction” is defined by the following equations:. $$\\text{waveguide TE fraction } = 1-\\frac{\\int\\left|E_{\\perp}\\right|^{2} dA_{||}}{\\int\\left(|E|^{2}\\right) dA_{||}}$$ $$\\text{waveguide TM fraction } = 1-\\frac{\\int\\left|H_{\\perp}\\right|^{2} dA_{||}}{\\int\\left(|H|^{2}\\right) dA_{||}}$$ where $E_{\\perp}$ and H_{\\perp} refer to the field components perpendicular to the mode cross section (ie. in the direction of propagation), $A_{||}$ refers to the integration area on the mode cross section plane. ","date":"2021-08-16","objectID":"/fdtd_basics/:3:4","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#waveguide-tetm-fraction"},{"categories":["Academic"],"content":"Effective AreaEffective area is a quantitative measure of the modal area. As with TE fraction, there are a number of possible similar definitions which can be easily misinterpreted. We have adopted the definition developed by G. P. Agrawal, Nonlinear Fiber Optics, 4th ed. (Academic, 2007). This method has the benefit of not making any assumptions about the shape of the field distribution beforehand. $$\\text{Effective Area} = \\frac{(\\int_{}^{}|E|^{2}dA)^{2} }{\\int_{}^{}|E|^{4}dA}$$ The effective area defined here is similar to the Landau, and Lishitz method, based on the ratio of a mode’s total energy density per unit length and its peak energy density. For Gaussian beams, and fiber optic modes the most cited quantity is the beam waist w(z) or equivalently mode field diameter (MFD). The MFD corresponds to twice the radial distance, where $I(r) = 1-e^{-2}\\approx 13.5$. In with the comparison normal distribution this radial value would correspond to $f( x \\approx 3 \\sigma )$, and is related to the full width half maximum (FWHM) as $w(z) \\approx 1.18 \\text{ FWHM}$. The effective area method cited above is typically in the range of 95-104% of what would be found using through the circle described by the MFD. ","date":"2021-08-16","objectID":"/fdtd_basics/:3:5","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#effective-area"},{"categories":["Academic"],"content":"Boundary condition","date":"2021-08-16","objectID":"/fdtd_basics/:4:0","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#boundary-condition"},{"categories":["Academic"],"content":"PML The steep angle profile should be used when the fields are incident on the PML at a steep or grazing angle, typically beyond 60 degrees. ","date":"2021-08-16","objectID":"/fdtd_basics/:4:1","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#pml"},{"categories":["Academic"],"content":"Periodic With periodic boundaries, the periodicity is determined by the span of the simulation region. It is very important to understand that both the structure, electromagnetic fields and source must be periodic. For this reason, plane wave sources with normal incidence are most often used with periodic boundary conditions. ","date":"2021-08-16","objectID":"/fdtd_basics/:4:2","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#periodic"},{"categories":["Academic"],"content":"Bloch Bloch boundaries are used for periodic simulations where the source is injected at an angle – they are similar to periodic boundaries where light which exits one boundary is re-injected from the opposite boundary, but they add the required phase difference to the light that is re-injected corresponding to the phase accumulated between the unit cells due to the angle of the source. ","date":"2021-08-16","objectID":"/fdtd_basics/:4:3","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#bloch"},{"categories":["Academic"],"content":"Symmetry/anti-symmetry When you have a structure and source that have a plane of symmetry through the middle of the simulation region, symmetry boundaries allow you to reduce the size of the solver region that needs to be simulated. The main challenge with using symmetry boundaries is determining which type of symmetry exists in the system: Positive Symmetry, or Anti-Symmetry. In most cases, the type of symmetry can be determined from the source polarization. If the source polarization arrow is tangential to the plane of symmetry, then the polarization arrow and the boundary shading color should match. If the polarization arrow is normal to the boundary, then the colors should not match.In most cases, monitors automatically unfold field data according to these rules. When using symmetry boundaries, the boundary should only be applied to the ‘min’ boundary. The ‘max’ boundary should be set to whatever the boundary would be without symmetry; typically PML. The only exception is when using symmetry boundaries with periodic structures. In such cases, set both the min and max boundaries in the periodic direction to use symmetric or anti-symmetric boundaries. You will need to enable the “allow symmetry on all boundaries” option. ","date":"2021-08-16","objectID":"/fdtd_basics/:4:4","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#symmetryanti-symmetry"},{"categories":["Academic"],"content":"Source","date":"2021-08-16","objectID":"/fdtd_basics/:5:0","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#source"},{"categories":["Academic"],"content":"plane wave normal incidence/ angled incidence single frequency/ broadband Bloch/Periodic BFAST diffracting ","date":"2021-08-16","objectID":"/fdtd_basics/:5:1","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#plane-wave"},{"categories":["Academic"],"content":"mode source The mode source can be used to inject the mode of a waveguide or fiber. The mode source includes an integrated mode solver with uses the finite-difference eigenmode solving algorithm to calculate the field profile of the supported modes of a given structure cross section. The mode solver assumes that the cross section of the structure constant along the propagation direction. To set up the mode source, the source should be positioned over the cross section of the waveguide or fiber. The mode source settings allow you to specify whether you want to find the mode for a straight or bent waveguide with a given bending radius, and also specify rotation angles to match the angle of the waveguide if the waveguide is not aligned with the x, y, or z-axis. You can choose to inject the fundamental mode which is the mode with highest effective index, or fundamental TE or fundamental TM mode which correspond to the mode with the highest effective index which has the desired TE-like or TM-like polarization. In FDTD Solutions, TE-like modes correspond to modes where the electric field polarization is primarily along the y-direction for sources injected along the x-axis, and primarily along the x-direction for sources injected in the y or z-axis directions. After calculating the modes using the specified mode solver settings, modes will appear in the model list at the top of the window, and you can select a mode from the mode list to plot the field profile of the mode. You can also see details about the calculated mode in the mode list table such as the effective index of the mode, loss, and polarization fraction. The formulae for the polarization fraction calculation and waveguide TE/TM fraction are calculated as: TE polarization fraction (for x-axis injection): $$\\frac{\\int\\left|E_{y}\\right|^2 dydz}{\\int\\left(\\left|E_{y}\\right|^2+\\left|E_{z}\\right|^2\\right) dydz}$$ waveguide TE and TM fraction (for z-axis injection): $$1-\\frac{\\int\\left|E_{\\perp}\\right|^2 dxdy}{\\int\\left(\\left|E\\right|^2\\right) dxdy}$$ $$1-\\frac{\\int\\left|H_{\\perp}\\right|^2 dxdy}{\\int\\left(\\left|H\\right|^2\\right) dxdy}$$ Multifrequency mode calculation option. This option should be used whenever injecting a broadband mode source. This will calculate the supported mode profile over the broadband range rather than just at the center frequency of the range. Ensure that the source span is wide enough to completely contain the mode of the structure. You can visually check this by plotting the field profile and making sure that the field amplitude of the mode decays to 0 around the edges of the source, but another way you can test this is by doing convergence testing by changing the span of the source. Start by calculating the mode, then increasing the span of the mode source and re-calculating the mode, then compare the calculated effective index of the mode between the two different source spans. If the mode source region is wide enough to contain the full mode, the calculated effective index should stay the same when you further increase the source span. ","date":"2021-08-16","objectID":"/fdtd_basics/:5:2","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#mode-source"},{"categories":["Academic"],"content":"dipole source The dipole source is a point source which emits a dipole radiation pattern. There are 2 types of dipole sources available: electric and magnetic. The electric dipole is equivalent to an oscillating point charge, whereas the magnetic dipole is equivalent to a current loop. ","date":"2021-08-16","objectID":"/fdtd_basics/:5:3","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#dipole-source"},{"categories":["Academic"],"content":"import source The import source allows you to specify a custom field profile to inject. The data for the field profile of the source can come from monitor data measured in a previous simulation, or it could be from another software such as a third-party ray tracing tool. It can also be calculated based on a formula using the script. You might want to use monitor data from a previous simulation as a source in a subsequent simulation, and this can be done in order to break up a large simulation into two or more simulations. ","date":"2021-08-16","objectID":"/fdtd_basics/:5:4","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#import-source"},{"categories":["Academic"],"content":"Monitor","date":"2021-08-16","objectID":"/fdtd_basics/:6:0","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#monitor"},{"categories":["Academic"],"content":"frequency domain field monitor Frequency domain field monitors return data in the frequency domain by taking the Fourier transform of the time domain fields. By default, CW normalization is applied, which means that the data is also normalized by the spectrum of the source pulse to give the result as though the source spectrum is uniform. In other words, by default, the result from a frequency domain monitor at a given frequency point is the response as though the source is injecting a continuous wave at the specified frequency with amplitude 1. There are two available frequency domain field monitors: the frequency-domain field profile monitor and the frequency-domain field and power monitor. The only difference between the two monitor types is the spatial interpolation method used. The profile monitor uses the specified position interpolation and the power monitor uses the nearest mesh cell interpolation method. In most cases, the results from these two monitors will be very similar. We recommend using the Frequency Domain Field and Power monitor unless you are an advanced user and have a detailed understanding of the monitor interpolation options. If all E and H field components are recorded by the monitor, it’s possible to project the fields from the monitor to get the far field angular distribution. This result is something that is calculated as a post-processing step after the simulation has been run, so when you first try to visualize the farfield result of the monitor, if it hasn’t yet been calculated, a window will pop up asking you to select the settings you want to use for the far field projection calculation. ","date":"2021-08-16","objectID":"/fdtd_basics/:6:1","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#frequency-domain-field-monitor"},{"categories":["Academic"],"content":"Analysis groupAnalysis groups can contain structures, sources, and monitors, and they are also capable of setting up the properties of these objects using a setup script. The analysis script is used to collect the results from monitors contained inside the group and calculate new results. ","date":"2021-08-16","objectID":"/fdtd_basics/:7:0","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#analysis-group"},{"categories":["Academic"],"content":"Lumerical scripting language","date":"2021-08-16","objectID":"/fdtd_basics/:8:0","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#lumerical-scripting-language"},{"categories":["Academic"],"content":"General workflow Set up simulation add simulation objects set properties Run simulation Analyze results ","date":"2021-08-16","objectID":"/fdtd_basics/:8:1","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#general-workflow"},{"categories":["Academic"],"content":"Common commands comment: ## end the statement with ; put the result on screen ? -?set; ## return a list of properties of the selected objects layoutmode() 0 No, in analysis mode 1 Yes add+‘object name’ -addrect() -addplane() -addpower() select() set(‘property_name’, value) setnamed(‘object_name’, ‘property_name’, value) ## same as select + set getdata(‘object_name’, ‘data_name’) getresult(‘object_name’, ‘dataset_name’) getelectric() ## advanced command, return $\\left|E_{x}\\right|^2+\\left|E_{y}\\right|^2+\\left|E_{z}\\right|^2$ from the monitor transmission() ## return the fraction of power transmitted through the monitor with respect to the source power getsweepdata() getsweepresult() ","date":"2021-08-16","objectID":"/fdtd_basics/:8:2","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#common-commands"},{"categories":["Academic"],"content":"Python API","date":"2021-08-16","objectID":"/fdtd_basics/:9:0","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#python-api"},{"categories":["Academic"],"content":"import modules import numpy as np from numpy.lib.scimath import sqrt ## complex sqrt() from scipy import constants import matplotlib.cm as cm import matplotlib.pyplot as plt %matplotlib inline from scipy import interpolate from collections import OrderedDict import importlib ## import mplcursors ## for data cursor ## import sys ## The default paths for windows spec = importlib.util.spec_from_file_location( 'lumapi', 'D:\\\\Program Files\\\\Lumerical\\\\v202\\\\api\\\\python\\\\lumapi.py') ## Functions that perform the actual loading lumapi = importlib.util.module_from_spec(spec) ## spec.loader.exec_module(lumapi) ","date":"2021-08-16","objectID":"/fdtd_basics/:9:1","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#import-modules"},{"categories":["Academic"],"content":"start a session fdtd = lumapi.FDTD() ## an empty instance fdtd = lumapi.FDTD('instance_name.fsp') ## an existing instance ","date":"2021-08-16","objectID":"/fdtd_basics/:9:2","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#start-a-session"},{"categories":["Academic"],"content":"get help ?fdtd.addrect help(fdtd.addrect) ","date":"2021-08-16","objectID":"/fdtd_basics/:9:3","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#get-help"},{"categories":["Academic"],"content":"simulation objectsadd and then set fdtd.addrect() fdtd.set('name', 'grating_T') add and set at the same timeset with parameters fdtd.addfdtd(dimension=\"2D\", x=0.0e-9, y=0.0e-9, x_span=3.0e-6, y_span=1.0e-6) set with dict ## order matters props = OrderedDict([(\"name\", \"power1\"),(\"override global monitor settings\", True),(\"x\", 0.),(\"y\", 0.4e-6), (\"monitor type\", \"linear x\"),(\"frequency points\", 10.0)]) fdtd.addpower(properties=props) ## order doesn't matter props = {\"name\": \"power2\", \"x\" : 0., \"y\" : 0.4e-6, \"monitor type\" : \"linear x\"} fdtd.addpower(properties=props) set with loop \"\"\" This function makes is convenient to reconstruct the simulation, while changing a few key properties, a brand new FDTD will start and close within this function \"\"\" fdtd = lumapi.FDTD() fdtd.addcircle() fdtd.addfdtd() fdtd.addmesh() fdtd.addtfsf() fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"scat\") fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"total\") fdtd.addtime() fdtd.set(\"name\", \"time\") fdtd.addprofile() fdtd.set(\"name\", \"profile\") configuration = ( (\"source\", ((\"polarization angle\", 0.), (\"injection axis\", \"y\"), (\"x\", 0.), (\"y\", 0.), (\"x span\", 100.0e-9), (\"y span\", 100.0e-9), (\"wavelength start\", 300.0e-9), (\"wavelength stop\", 400.0e-9))), (\"mesh\", ((\"dx\", 0.5e-9), (\"dy\", 0.5e-9), (\"x\", 0.), (\"y\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"FDTD\", ((\"simulation time\", 200e-15), ## in seconds (\"dimension\", \"2D\"), (\"x\",0.0e-9), (\"y\",0.), (\"z\",0.), (\"x span\", 800.0e-9), (\"y span\", 800.0e-9), (\"mesh refinement\", \"conformal variant 1\"))), (\"circle\", ((\"x\", 0.0e-9), (\"y\", 0.0e-9), (\"z\", 0.0e-9), (\"radius\", 25.0e-9), ## in meters (\"material\", \"Ag (Silver) - Palik (0-2um)\"))), (\"scat\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"total\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 90.0e-9), (\"y span\", 90.0e-9))), (\"time\", ((\"x\", 28.0e-9), (\"y\", 26.0e-9))), (\"profile\", ((\"x\", 0.), (\"y\", 0.), (\"x span\", 90e-9), (\"y span\", 90e-9), (\"override global monitor settings\", True), (\"use source limits\", False), (\"frequency points\", 1), (\"wavelength center\", float(profile_monitor_wavelength)), (\"wavelength span\", 0.))), ) ''' To set the geometry, we found that it is more efficient and cleaner to use nested tuple, however, advanced users may use any ordered collection. The order is important if a property depends on the value of another property. ''' for obj, parameters in configuration: for k, v in parameters: fdtd.setnamed(obj, k, v) ","date":"2021-08-16","objectID":"/fdtd_basics/:9:4","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#simulation-objects"},{"categories":["Academic"],"content":"simulation objectsadd and then set fdtd.addrect() fdtd.set('name', 'grating_T') add and set at the same timeset with parameters fdtd.addfdtd(dimension=\"2D\", x=0.0e-9, y=0.0e-9, x_span=3.0e-6, y_span=1.0e-6) set with dict ## order matters props = OrderedDict([(\"name\", \"power1\"),(\"override global monitor settings\", True),(\"x\", 0.),(\"y\", 0.4e-6), (\"monitor type\", \"linear x\"),(\"frequency points\", 10.0)]) fdtd.addpower(properties=props) ## order doesn't matter props = {\"name\": \"power2\", \"x\" : 0., \"y\" : 0.4e-6, \"monitor type\" : \"linear x\"} fdtd.addpower(properties=props) set with loop \"\"\" This function makes is convenient to reconstruct the simulation, while changing a few key properties, a brand new FDTD will start and close within this function \"\"\" fdtd = lumapi.FDTD() fdtd.addcircle() fdtd.addfdtd() fdtd.addmesh() fdtd.addtfsf() fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"scat\") fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"total\") fdtd.addtime() fdtd.set(\"name\", \"time\") fdtd.addprofile() fdtd.set(\"name\", \"profile\") configuration = ( (\"source\", ((\"polarization angle\", 0.), (\"injection axis\", \"y\"), (\"x\", 0.), (\"y\", 0.), (\"x span\", 100.0e-9), (\"y span\", 100.0e-9), (\"wavelength start\", 300.0e-9), (\"wavelength stop\", 400.0e-9))), (\"mesh\", ((\"dx\", 0.5e-9), (\"dy\", 0.5e-9), (\"x\", 0.), (\"y\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"FDTD\", ((\"simulation time\", 200e-15), ## in seconds (\"dimension\", \"2D\"), (\"x\",0.0e-9), (\"y\",0.), (\"z\",0.), (\"x span\", 800.0e-9), (\"y span\", 800.0e-9), (\"mesh refinement\", \"conformal variant 1\"))), (\"circle\", ((\"x\", 0.0e-9), (\"y\", 0.0e-9), (\"z\", 0.0e-9), (\"radius\", 25.0e-9), ## in meters (\"material\", \"Ag (Silver) - Palik (0-2um)\"))), (\"scat\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"total\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 90.0e-9), (\"y span\", 90.0e-9))), (\"time\", ((\"x\", 28.0e-9), (\"y\", 26.0e-9))), (\"profile\", ((\"x\", 0.), (\"y\", 0.), (\"x span\", 90e-9), (\"y span\", 90e-9), (\"override global monitor settings\", True), (\"use source limits\", False), (\"frequency points\", 1), (\"wavelength center\", float(profile_monitor_wavelength)), (\"wavelength span\", 0.))), ) ''' To set the geometry, we found that it is more efficient and cleaner to use nested tuple, however, advanced users may use any ordered collection. The order is important if a property depends on the value of another property. ''' for obj, parameters in configuration: for k, v in parameters: fdtd.setnamed(obj, k, v) ","date":"2021-08-16","objectID":"/fdtd_basics/:9:4","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#add-and-then-set"},{"categories":["Academic"],"content":"simulation objectsadd and then set fdtd.addrect() fdtd.set('name', 'grating_T') add and set at the same timeset with parameters fdtd.addfdtd(dimension=\"2D\", x=0.0e-9, y=0.0e-9, x_span=3.0e-6, y_span=1.0e-6) set with dict ## order matters props = OrderedDict([(\"name\", \"power1\"),(\"override global monitor settings\", True),(\"x\", 0.),(\"y\", 0.4e-6), (\"monitor type\", \"linear x\"),(\"frequency points\", 10.0)]) fdtd.addpower(properties=props) ## order doesn't matter props = {\"name\": \"power2\", \"x\" : 0., \"y\" : 0.4e-6, \"monitor type\" : \"linear x\"} fdtd.addpower(properties=props) set with loop \"\"\" This function makes is convenient to reconstruct the simulation, while changing a few key properties, a brand new FDTD will start and close within this function \"\"\" fdtd = lumapi.FDTD() fdtd.addcircle() fdtd.addfdtd() fdtd.addmesh() fdtd.addtfsf() fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"scat\") fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"total\") fdtd.addtime() fdtd.set(\"name\", \"time\") fdtd.addprofile() fdtd.set(\"name\", \"profile\") configuration = ( (\"source\", ((\"polarization angle\", 0.), (\"injection axis\", \"y\"), (\"x\", 0.), (\"y\", 0.), (\"x span\", 100.0e-9), (\"y span\", 100.0e-9), (\"wavelength start\", 300.0e-9), (\"wavelength stop\", 400.0e-9))), (\"mesh\", ((\"dx\", 0.5e-9), (\"dy\", 0.5e-9), (\"x\", 0.), (\"y\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"FDTD\", ((\"simulation time\", 200e-15), ## in seconds (\"dimension\", \"2D\"), (\"x\",0.0e-9), (\"y\",0.), (\"z\",0.), (\"x span\", 800.0e-9), (\"y span\", 800.0e-9), (\"mesh refinement\", \"conformal variant 1\"))), (\"circle\", ((\"x\", 0.0e-9), (\"y\", 0.0e-9), (\"z\", 0.0e-9), (\"radius\", 25.0e-9), ## in meters (\"material\", \"Ag (Silver) - Palik (0-2um)\"))), (\"scat\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"total\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 90.0e-9), (\"y span\", 90.0e-9))), (\"time\", ((\"x\", 28.0e-9), (\"y\", 26.0e-9))), (\"profile\", ((\"x\", 0.), (\"y\", 0.), (\"x span\", 90e-9), (\"y span\", 90e-9), (\"override global monitor settings\", True), (\"use source limits\", False), (\"frequency points\", 1), (\"wavelength center\", float(profile_monitor_wavelength)), (\"wavelength span\", 0.))), ) ''' To set the geometry, we found that it is more efficient and cleaner to use nested tuple, however, advanced users may use any ordered collection. The order is important if a property depends on the value of another property. ''' for obj, parameters in configuration: for k, v in parameters: fdtd.setnamed(obj, k, v) ","date":"2021-08-16","objectID":"/fdtd_basics/:9:4","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#add-and-set-at-the-same-time"},{"categories":["Academic"],"content":"simulation objectsadd and then set fdtd.addrect() fdtd.set('name', 'grating_T') add and set at the same timeset with parameters fdtd.addfdtd(dimension=\"2D\", x=0.0e-9, y=0.0e-9, x_span=3.0e-6, y_span=1.0e-6) set with dict ## order matters props = OrderedDict([(\"name\", \"power1\"),(\"override global monitor settings\", True),(\"x\", 0.),(\"y\", 0.4e-6), (\"monitor type\", \"linear x\"),(\"frequency points\", 10.0)]) fdtd.addpower(properties=props) ## order doesn't matter props = {\"name\": \"power2\", \"x\" : 0., \"y\" : 0.4e-6, \"monitor type\" : \"linear x\"} fdtd.addpower(properties=props) set with loop \"\"\" This function makes is convenient to reconstruct the simulation, while changing a few key properties, a brand new FDTD will start and close within this function \"\"\" fdtd = lumapi.FDTD() fdtd.addcircle() fdtd.addfdtd() fdtd.addmesh() fdtd.addtfsf() fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"scat\") fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"total\") fdtd.addtime() fdtd.set(\"name\", \"time\") fdtd.addprofile() fdtd.set(\"name\", \"profile\") configuration = ( (\"source\", ((\"polarization angle\", 0.), (\"injection axis\", \"y\"), (\"x\", 0.), (\"y\", 0.), (\"x span\", 100.0e-9), (\"y span\", 100.0e-9), (\"wavelength start\", 300.0e-9), (\"wavelength stop\", 400.0e-9))), (\"mesh\", ((\"dx\", 0.5e-9), (\"dy\", 0.5e-9), (\"x\", 0.), (\"y\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"FDTD\", ((\"simulation time\", 200e-15), ## in seconds (\"dimension\", \"2D\"), (\"x\",0.0e-9), (\"y\",0.), (\"z\",0.), (\"x span\", 800.0e-9), (\"y span\", 800.0e-9), (\"mesh refinement\", \"conformal variant 1\"))), (\"circle\", ((\"x\", 0.0e-9), (\"y\", 0.0e-9), (\"z\", 0.0e-9), (\"radius\", 25.0e-9), ## in meters (\"material\", \"Ag (Silver) - Palik (0-2um)\"))), (\"scat\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"total\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 90.0e-9), (\"y span\", 90.0e-9))), (\"time\", ((\"x\", 28.0e-9), (\"y\", 26.0e-9))), (\"profile\", ((\"x\", 0.), (\"y\", 0.), (\"x span\", 90e-9), (\"y span\", 90e-9), (\"override global monitor settings\", True), (\"use source limits\", False), (\"frequency points\", 1), (\"wavelength center\", float(profile_monitor_wavelength)), (\"wavelength span\", 0.))), ) ''' To set the geometry, we found that it is more efficient and cleaner to use nested tuple, however, advanced users may use any ordered collection. The order is important if a property depends on the value of another property. ''' for obj, parameters in configuration: for k, v in parameters: fdtd.setnamed(obj, k, v) ","date":"2021-08-16","objectID":"/fdtd_basics/:9:4","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#set-with-parameters"},{"categories":["Academic"],"content":"simulation objectsadd and then set fdtd.addrect() fdtd.set('name', 'grating_T') add and set at the same timeset with parameters fdtd.addfdtd(dimension=\"2D\", x=0.0e-9, y=0.0e-9, x_span=3.0e-6, y_span=1.0e-6) set with dict ## order matters props = OrderedDict([(\"name\", \"power1\"),(\"override global monitor settings\", True),(\"x\", 0.),(\"y\", 0.4e-6), (\"monitor type\", \"linear x\"),(\"frequency points\", 10.0)]) fdtd.addpower(properties=props) ## order doesn't matter props = {\"name\": \"power2\", \"x\" : 0., \"y\" : 0.4e-6, \"monitor type\" : \"linear x\"} fdtd.addpower(properties=props) set with loop \"\"\" This function makes is convenient to reconstruct the simulation, while changing a few key properties, a brand new FDTD will start and close within this function \"\"\" fdtd = lumapi.FDTD() fdtd.addcircle() fdtd.addfdtd() fdtd.addmesh() fdtd.addtfsf() fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"scat\") fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"total\") fdtd.addtime() fdtd.set(\"name\", \"time\") fdtd.addprofile() fdtd.set(\"name\", \"profile\") configuration = ( (\"source\", ((\"polarization angle\", 0.), (\"injection axis\", \"y\"), (\"x\", 0.), (\"y\", 0.), (\"x span\", 100.0e-9), (\"y span\", 100.0e-9), (\"wavelength start\", 300.0e-9), (\"wavelength stop\", 400.0e-9))), (\"mesh\", ((\"dx\", 0.5e-9), (\"dy\", 0.5e-9), (\"x\", 0.), (\"y\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"FDTD\", ((\"simulation time\", 200e-15), ## in seconds (\"dimension\", \"2D\"), (\"x\",0.0e-9), (\"y\",0.), (\"z\",0.), (\"x span\", 800.0e-9), (\"y span\", 800.0e-9), (\"mesh refinement\", \"conformal variant 1\"))), (\"circle\", ((\"x\", 0.0e-9), (\"y\", 0.0e-9), (\"z\", 0.0e-9), (\"radius\", 25.0e-9), ## in meters (\"material\", \"Ag (Silver) - Palik (0-2um)\"))), (\"scat\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"total\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 90.0e-9), (\"y span\", 90.0e-9))), (\"time\", ((\"x\", 28.0e-9), (\"y\", 26.0e-9))), (\"profile\", ((\"x\", 0.), (\"y\", 0.), (\"x span\", 90e-9), (\"y span\", 90e-9), (\"override global monitor settings\", True), (\"use source limits\", False), (\"frequency points\", 1), (\"wavelength center\", float(profile_monitor_wavelength)), (\"wavelength span\", 0.))), ) ''' To set the geometry, we found that it is more efficient and cleaner to use nested tuple, however, advanced users may use any ordered collection. The order is important if a property depends on the value of another property. ''' for obj, parameters in configuration: for k, v in parameters: fdtd.setnamed(obj, k, v) ","date":"2021-08-16","objectID":"/fdtd_basics/:9:4","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#set-with-dict"},{"categories":["Academic"],"content":"simulation objectsadd and then set fdtd.addrect() fdtd.set('name', 'grating_T') add and set at the same timeset with parameters fdtd.addfdtd(dimension=\"2D\", x=0.0e-9, y=0.0e-9, x_span=3.0e-6, y_span=1.0e-6) set with dict ## order matters props = OrderedDict([(\"name\", \"power1\"),(\"override global monitor settings\", True),(\"x\", 0.),(\"y\", 0.4e-6), (\"monitor type\", \"linear x\"),(\"frequency points\", 10.0)]) fdtd.addpower(properties=props) ## order doesn't matter props = {\"name\": \"power2\", \"x\" : 0., \"y\" : 0.4e-6, \"monitor type\" : \"linear x\"} fdtd.addpower(properties=props) set with loop \"\"\" This function makes is convenient to reconstruct the simulation, while changing a few key properties, a brand new FDTD will start and close within this function \"\"\" fdtd = lumapi.FDTD() fdtd.addcircle() fdtd.addfdtd() fdtd.addmesh() fdtd.addtfsf() fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"scat\") fdtd.addobject(\"cross_section\") fdtd.set(\"name\", \"total\") fdtd.addtime() fdtd.set(\"name\", \"time\") fdtd.addprofile() fdtd.set(\"name\", \"profile\") configuration = ( (\"source\", ((\"polarization angle\", 0.), (\"injection axis\", \"y\"), (\"x\", 0.), (\"y\", 0.), (\"x span\", 100.0e-9), (\"y span\", 100.0e-9), (\"wavelength start\", 300.0e-9), (\"wavelength stop\", 400.0e-9))), (\"mesh\", ((\"dx\", 0.5e-9), (\"dy\", 0.5e-9), (\"x\", 0.), (\"y\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"FDTD\", ((\"simulation time\", 200e-15), ## in seconds (\"dimension\", \"2D\"), (\"x\",0.0e-9), (\"y\",0.), (\"z\",0.), (\"x span\", 800.0e-9), (\"y span\", 800.0e-9), (\"mesh refinement\", \"conformal variant 1\"))), (\"circle\", ((\"x\", 0.0e-9), (\"y\", 0.0e-9), (\"z\", 0.0e-9), (\"radius\", 25.0e-9), ## in meters (\"material\", \"Ag (Silver) - Palik (0-2um)\"))), (\"scat\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 110.0e-9), (\"y span\", 110.0e-9))), (\"total\", ((\"x\", 0.), (\"y\", 0.), (\"z\", 0.), (\"x span\", 90.0e-9), (\"y span\", 90.0e-9))), (\"time\", ((\"x\", 28.0e-9), (\"y\", 26.0e-9))), (\"profile\", ((\"x\", 0.), (\"y\", 0.), (\"x span\", 90e-9), (\"y span\", 90e-9), (\"override global monitor settings\", True), (\"use source limits\", False), (\"frequency points\", 1), (\"wavelength center\", float(profile_monitor_wavelength)), (\"wavelength span\", 0.))), ) ''' To set the geometry, we found that it is more efficient and cleaner to use nested tuple, however, advanced users may use any ordered collection. The order is important if a property depends on the value of another property. ''' for obj, parameters in configuration: for k, v in parameters: fdtd.setnamed(obj, k, v) ","date":"2021-08-16","objectID":"/fdtd_basics/:9:4","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#set-with-loop"},{"categories":["Academic"],"content":"run, save and close fdtd.run() fdtd.save('filename.fsp') fdtd.close() ","date":"2021-08-16","objectID":"/fdtd_basics/:9:5","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#run-save-and-close"},{"categories":["Academic"],"content":"deal with dataget data Ex = fdtd.getdata(\"profile\",\"Ex\") print('Frequency field profile data Ex is type', type(Ex),' with shape', str(Ex.shape )) Frequency field profile data Ex is type \u003cclass ‘numpy.ndarray’\u003e with shape (101, 61, 1, 5) T, time = fdtd.getresult(\"power\", \"T\"), fdtd.getresult(\"time\",\"E\") print('Transmission result T is type', type(T),' with keys', str(T.keys()) ) print('Time monitor result E is type', type(time),' with keys', str(time.keys()) ) Transmission result T is type \u003cclass ‘dict’\u003e with keys dict_keys([‘lambda’, ‘f’, ‘T’, ‘Lumerical_dataset’]) Time monitor result E is type \u003cclass ‘dict’\u003e with keys dict_keys([’t', ‘x’, ‘y’, ‘z’, ‘E’, ‘Lumerical_dataset’]) data is numerical data type, usually numpy array. dataset is dict type, and should be taken care by T=T_dataset['T'] now T is numpy array type data structure ## get dataset E = fdtd.getresult(\"DFT\",\"E\") ## electric field E = E['E'] we see here E is a 5-dimension matrix Ex = E[:,:,0,:,0] ## spatial(x,y,z) ,wavelength, Ex Ey = E[:,:,0,:,1] ## spatial(x,y,z) ,wavelength, Ey Ez = E[:,:,0,:,2] ## spatial(x,y,z) ,wavelength, Ez ","date":"2021-08-16","objectID":"/fdtd_basics/:9:6","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#deal-with-data"},{"categories":["Academic"],"content":"deal with dataget data Ex = fdtd.getdata(\"profile\",\"Ex\") print('Frequency field profile data Ex is type', type(Ex),' with shape', str(Ex.shape )) Frequency field profile data Ex is type with shape (101, 61, 1, 5) T, time = fdtd.getresult(\"power\", \"T\"), fdtd.getresult(\"time\",\"E\") print('Transmission result T is type', type(T),' with keys', str(T.keys()) ) print('Time monitor result E is type', type(time),' with keys', str(time.keys()) ) Transmission result T is type with keys dict_keys([‘lambda’, ‘f’, ‘T’, ‘Lumerical_dataset’]) Time monitor result E is type with keys dict_keys([’t', ‘x’, ‘y’, ‘z’, ‘E’, ‘Lumerical_dataset’]) data is numerical data type, usually numpy array. dataset is dict type, and should be taken care by T=T_dataset['T'] now T is numpy array type data structure ## get dataset E = fdtd.getresult(\"DFT\",\"E\") ## electric field E = E['E'] we see here E is a 5-dimension matrix Ex = E[:,:,0,:,0] ## spatial(x,y,z) ,wavelength, Ex Ey = E[:,:,0,:,1] ## spatial(x,y,z) ,wavelength, Ey Ez = E[:,:,0,:,2] ## spatial(x,y,z) ,wavelength, Ez ","date":"2021-08-16","objectID":"/fdtd_basics/:9:6","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#get-data"},{"categories":["Academic"],"content":"deal with dataget data Ex = fdtd.getdata(\"profile\",\"Ex\") print('Frequency field profile data Ex is type', type(Ex),' with shape', str(Ex.shape )) Frequency field profile data Ex is type with shape (101, 61, 1, 5) T, time = fdtd.getresult(\"power\", \"T\"), fdtd.getresult(\"time\",\"E\") print('Transmission result T is type', type(T),' with keys', str(T.keys()) ) print('Time monitor result E is type', type(time),' with keys', str(time.keys()) ) Transmission result T is type with keys dict_keys([‘lambda’, ‘f’, ‘T’, ‘Lumerical_dataset’]) Time monitor result E is type with keys dict_keys([’t', ‘x’, ‘y’, ‘z’, ‘E’, ‘Lumerical_dataset’]) data is numerical data type, usually numpy array. dataset is dict type, and should be taken care by T=T_dataset['T'] now T is numpy array type data structure ## get dataset E = fdtd.getresult(\"DFT\",\"E\") ## electric field E = E['E'] we see here E is a 5-dimension matrix Ex = E[:,:,0,:,0] ## spatial(x,y,z) ,wavelength, Ex Ey = E[:,:,0,:,1] ## spatial(x,y,z) ,wavelength, Ey Ez = E[:,:,0,:,2] ## spatial(x,y,z) ,wavelength, Ez ","date":"2021-08-16","objectID":"/fdtd_basics/:9:6","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#data-structure"},{"categories":["Academic"],"content":"pass data between python and lumerical fdtd.putv('var_name',py_var) ## python to lumerical py_var = fdtd.getv( 'var_name') ## lumerical to python ","date":"2021-08-16","objectID":"/fdtd_basics/:9:7","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#pass-data-between-python-and-lumerical"},{"categories":["Academic"],"content":"run lumerical script language fdtd.eval('x = [0;1;2];y = [0;sqrt(3);0];z = [0;0;0];C = [1,3,2];ds = unstructureddataset(x,y,z,C);') ","date":"2021-08-16","objectID":"/fdtd_basics/:9:8","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#run-lumerical-script-language"},{"categories":["Academic"],"content":"useful code snippets ## make sure it is a \"1d array\", numpy type n = np.array(fdtd.gratingn(mname, size_f)).flatten() ## MATLAB length() size_n = n.size ## MATLAB zeros(), input should be a tuple T_grating = np.zeros((size_n, size_m, size_f)) ## initialize with data type grating_S = np.zeros((size_n, size_m, size_f), dtype=np.complex_) ## MATLAB and Lumerical start from 1, but python starts from 0 ## 1 dimension closest value's index n1 = abs(n - 0).argmin() ## n is an array ## 2 dimension closest values' index u1i = abs(u1_new - u1[:, np.newaxis]).argmin(axis = 1) u2i = abs(u2_new - u2[:, np.newaxis]).argmin(axis = 1) T_nm_new[np.ix_(u1i,u2i)] = T_nm + 1e-18 ## different with MATLAB ## meshgrid indexing, opposite to MATLAB, but more intuitive np.meshgrid(u1, u2, indexing='ij') ## real transmitted power power1 = fdtd.transmission(mname).flatten() power1 = power1[fpoint] * fdtd.sourcepower(f) ## interp3d method 1 tempX,tempY,tempZ = np.meshgrid(tempx,tempy,tempz,indexing = 'ij') pts = np.vstack((tempX.flatten(),tempY.flatten(),tempZ.flatten())).transpose() temp_interp_func = interpolate.RegularGridInterpolator((xt,yt,zt), E2t) E2t = temp_interp_func(pts).reshape((xt.size,yt.size,zt.size)) ## interp3d method 2 tempX, tempY, tempZ = np.meshgrid(tempx, tempy, tempz, indexing='ij') pts = np.vstack( (tempX.flatten(), tempY.flatten(), tempZ.flatten())).transpose() E2t = interpolate.interpn((xt, yt, zt), E2t, pts).reshape( (xt.size, yt.size, zt.size)) 1d plot with plt.xkcd(): fig, ax = plt.subplots(dpi = 100) ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) ## ax.set_xticks([]) ## ax.set_yticks([]) ax.plot(lam/1e-6,theta_01, label = \"Theta\") ax.plot(lam/1e-6,phi_01, label = \"Phi\") ax.set_xlim(0.85,1) ax.set_ylim(70,91) ax.set_xlabel(r'Wavelength ($\\mathrm{\\mu m}$)') ax.set_ylabel(\"Diffraction angle for \"+str(n_target)+\",\"+str(m_target)+\") order\") ax.legend() 2d plot with interp2d ## create image x = E_image[\"x\"]*1e6 ## data on uniform grid, convert m to um y = E_image[\"y\"]*1e6 ## data on uniform grid, convert m to um Ex = E_image[\"E\"][:,:,0,0,0] ## data on uniform grid, selecting the x-component of first frequency Ex_abs = abs(Ex) xi = numpy.linspace(numpy.amin(x),numpy.amax(x),len(x)) yi = numpy.linspace(numpy.amin(y),numpy.amax(y),len(y)) f= interpolate.interp2d(y,x,Ex_abs) Exi_abs = f(yi, xi) im = plt.imshow(numpy.transpose(Exi_abs), aspect='equal', interpolation='bicubic', cmap=cm.RdYlGn, origin='lower', extent=[xi.min(), xi.max(), yi.min(), yi.max()], vmax=Exi_abs.max(), vmin=Exi_abs.min()) plt.colorbar() plt.xlabel('x (um)') plt.ylabel('y (um)') indices=numpy.where(Exi_abs==Exi_abs.max()) ## finding the location of max abs(Ex) plt.annotate('local max', xy=(xi[indices[0]], yi[indices[1]]), xytext=(0.7, -0.2), arrowprops=dict(arrowstyle=\"-\u003e\")) plt.savefig(\"image_plot.png\") plt.show() 2d subplots Xt, Zt = np.meshgrid(xt, zt, indexing='ij') with plt.xkcd(): fig, axes = plt.subplots(1, 2, dpi=100, figsize=(10, 4)) ax = axes[0] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2t, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by FDTD at \" + str(np.round(lam * 1e9, 3)) + \"nm\") ax = axes[1] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2p, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by projection at \" + str(np.round(lam * 1e9, 3)) + \"nm\") plt.tight_layout() custom functions def addattribute(dataset_name, attribute_name, attribute_data): ''' Help on method addattribute: addattribute(dataset_name, attribute_name, attribute_data) method of lumapi.FDTD instance Adds an attribute to an existing dataset. +--------------------------------------+--------------------------------------+ | Syntax | Description | +-------------------------------","date":"2021-08-16","objectID":"/fdtd_basics/:9:9","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#useful-code-snippets"},{"categories":["Academic"],"content":"useful code snippets ## make sure it is a \"1d array\", numpy type n = np.array(fdtd.gratingn(mname, size_f)).flatten() ## MATLAB length() size_n = n.size ## MATLAB zeros(), input should be a tuple T_grating = np.zeros((size_n, size_m, size_f)) ## initialize with data type grating_S = np.zeros((size_n, size_m, size_f), dtype=np.complex_) ## MATLAB and Lumerical start from 1, but python starts from 0 ## 1 dimension closest value's index n1 = abs(n - 0).argmin() ## n is an array ## 2 dimension closest values' index u1i = abs(u1_new - u1[:, np.newaxis]).argmin(axis = 1) u2i = abs(u2_new - u2[:, np.newaxis]).argmin(axis = 1) T_nm_new[np.ix_(u1i,u2i)] = T_nm + 1e-18 ## different with MATLAB ## meshgrid indexing, opposite to MATLAB, but more intuitive np.meshgrid(u1, u2, indexing='ij') ## real transmitted power power1 = fdtd.transmission(mname).flatten() power1 = power1[fpoint] * fdtd.sourcepower(f) ## interp3d method 1 tempX,tempY,tempZ = np.meshgrid(tempx,tempy,tempz,indexing = 'ij') pts = np.vstack((tempX.flatten(),tempY.flatten(),tempZ.flatten())).transpose() temp_interp_func = interpolate.RegularGridInterpolator((xt,yt,zt), E2t) E2t = temp_interp_func(pts).reshape((xt.size,yt.size,zt.size)) ## interp3d method 2 tempX, tempY, tempZ = np.meshgrid(tempx, tempy, tempz, indexing='ij') pts = np.vstack( (tempX.flatten(), tempY.flatten(), tempZ.flatten())).transpose() E2t = interpolate.interpn((xt, yt, zt), E2t, pts).reshape( (xt.size, yt.size, zt.size)) 1d plot with plt.xkcd(): fig, ax = plt.subplots(dpi = 100) ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) ## ax.set_xticks([]) ## ax.set_yticks([]) ax.plot(lam/1e-6,theta_01, label = \"Theta\") ax.plot(lam/1e-6,phi_01, label = \"Phi\") ax.set_xlim(0.85,1) ax.set_ylim(70,91) ax.set_xlabel(r'Wavelength ($\\mathrm{\\mu m}$)') ax.set_ylabel(\"Diffraction angle for \"+str(n_target)+\",\"+str(m_target)+\") order\") ax.legend() 2d plot with interp2d ## create image x = E_image[\"x\"]*1e6 ## data on uniform grid, convert m to um y = E_image[\"y\"]*1e6 ## data on uniform grid, convert m to um Ex = E_image[\"E\"][:,:,0,0,0] ## data on uniform grid, selecting the x-component of first frequency Ex_abs = abs(Ex) xi = numpy.linspace(numpy.amin(x),numpy.amax(x),len(x)) yi = numpy.linspace(numpy.amin(y),numpy.amax(y),len(y)) f= interpolate.interp2d(y,x,Ex_abs) Exi_abs = f(yi, xi) im = plt.imshow(numpy.transpose(Exi_abs), aspect='equal', interpolation='bicubic', cmap=cm.RdYlGn, origin='lower', extent=[xi.min(), xi.max(), yi.min(), yi.max()], vmax=Exi_abs.max(), vmin=Exi_abs.min()) plt.colorbar() plt.xlabel('x (um)') plt.ylabel('y (um)') indices=numpy.where(Exi_abs==Exi_abs.max()) ## finding the location of max abs(Ex) plt.annotate('local max', xy=(xi[indices[0]], yi[indices[1]]), xytext=(0.7, -0.2), arrowprops=dict(arrowstyle=\"-\")) plt.savefig(\"image_plot.png\") plt.show() 2d subplots Xt, Zt = np.meshgrid(xt, zt, indexing='ij') with plt.xkcd(): fig, axes = plt.subplots(1, 2, dpi=100, figsize=(10, 4)) ax = axes[0] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2t, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by FDTD at \" + str(np.round(lam * 1e9, 3)) + \"nm\") ax = axes[1] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2p, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by projection at \" + str(np.round(lam * 1e9, 3)) + \"nm\") plt.tight_layout() custom functions def addattribute(dataset_name, attribute_name, attribute_data): ''' Help on method addattribute: addattribute(dataset_name, attribute_name, attribute_data) method of lumapi.FDTD instance Adds an attribute to an existing dataset. +--------------------------------------+--------------------------------------+ | Syntax | Description | +-------------------------------","date":"2021-08-16","objectID":"/fdtd_basics/:9:9","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#1d-plot"},{"categories":["Academic"],"content":"useful code snippets ## make sure it is a \"1d array\", numpy type n = np.array(fdtd.gratingn(mname, size_f)).flatten() ## MATLAB length() size_n = n.size ## MATLAB zeros(), input should be a tuple T_grating = np.zeros((size_n, size_m, size_f)) ## initialize with data type grating_S = np.zeros((size_n, size_m, size_f), dtype=np.complex_) ## MATLAB and Lumerical start from 1, but python starts from 0 ## 1 dimension closest value's index n1 = abs(n - 0).argmin() ## n is an array ## 2 dimension closest values' index u1i = abs(u1_new - u1[:, np.newaxis]).argmin(axis = 1) u2i = abs(u2_new - u2[:, np.newaxis]).argmin(axis = 1) T_nm_new[np.ix_(u1i,u2i)] = T_nm + 1e-18 ## different with MATLAB ## meshgrid indexing, opposite to MATLAB, but more intuitive np.meshgrid(u1, u2, indexing='ij') ## real transmitted power power1 = fdtd.transmission(mname).flatten() power1 = power1[fpoint] * fdtd.sourcepower(f) ## interp3d method 1 tempX,tempY,tempZ = np.meshgrid(tempx,tempy,tempz,indexing = 'ij') pts = np.vstack((tempX.flatten(),tempY.flatten(),tempZ.flatten())).transpose() temp_interp_func = interpolate.RegularGridInterpolator((xt,yt,zt), E2t) E2t = temp_interp_func(pts).reshape((xt.size,yt.size,zt.size)) ## interp3d method 2 tempX, tempY, tempZ = np.meshgrid(tempx, tempy, tempz, indexing='ij') pts = np.vstack( (tempX.flatten(), tempY.flatten(), tempZ.flatten())).transpose() E2t = interpolate.interpn((xt, yt, zt), E2t, pts).reshape( (xt.size, yt.size, zt.size)) 1d plot with plt.xkcd(): fig, ax = plt.subplots(dpi = 100) ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) ## ax.set_xticks([]) ## ax.set_yticks([]) ax.plot(lam/1e-6,theta_01, label = \"Theta\") ax.plot(lam/1e-6,phi_01, label = \"Phi\") ax.set_xlim(0.85,1) ax.set_ylim(70,91) ax.set_xlabel(r'Wavelength ($\\mathrm{\\mu m}$)') ax.set_ylabel(\"Diffraction angle for \"+str(n_target)+\",\"+str(m_target)+\") order\") ax.legend() 2d plot with interp2d ## create image x = E_image[\"x\"]*1e6 ## data on uniform grid, convert m to um y = E_image[\"y\"]*1e6 ## data on uniform grid, convert m to um Ex = E_image[\"E\"][:,:,0,0,0] ## data on uniform grid, selecting the x-component of first frequency Ex_abs = abs(Ex) xi = numpy.linspace(numpy.amin(x),numpy.amax(x),len(x)) yi = numpy.linspace(numpy.amin(y),numpy.amax(y),len(y)) f= interpolate.interp2d(y,x,Ex_abs) Exi_abs = f(yi, xi) im = plt.imshow(numpy.transpose(Exi_abs), aspect='equal', interpolation='bicubic', cmap=cm.RdYlGn, origin='lower', extent=[xi.min(), xi.max(), yi.min(), yi.max()], vmax=Exi_abs.max(), vmin=Exi_abs.min()) plt.colorbar() plt.xlabel('x (um)') plt.ylabel('y (um)') indices=numpy.where(Exi_abs==Exi_abs.max()) ## finding the location of max abs(Ex) plt.annotate('local max', xy=(xi[indices[0]], yi[indices[1]]), xytext=(0.7, -0.2), arrowprops=dict(arrowstyle=\"-\")) plt.savefig(\"image_plot.png\") plt.show() 2d subplots Xt, Zt = np.meshgrid(xt, zt, indexing='ij') with plt.xkcd(): fig, axes = plt.subplots(1, 2, dpi=100, figsize=(10, 4)) ax = axes[0] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2t, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by FDTD at \" + str(np.round(lam * 1e9, 3)) + \"nm\") ax = axes[1] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2p, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by projection at \" + str(np.round(lam * 1e9, 3)) + \"nm\") plt.tight_layout() custom functions def addattribute(dataset_name, attribute_name, attribute_data): ''' Help on method addattribute: addattribute(dataset_name, attribute_name, attribute_data) method of lumapi.FDTD instance Adds an attribute to an existing dataset. +--------------------------------------+--------------------------------------+ | Syntax | Description | +-------------------------------","date":"2021-08-16","objectID":"/fdtd_basics/:9:9","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#2d-plot-with-interp2d"},{"categories":["Academic"],"content":"useful code snippets ## make sure it is a \"1d array\", numpy type n = np.array(fdtd.gratingn(mname, size_f)).flatten() ## MATLAB length() size_n = n.size ## MATLAB zeros(), input should be a tuple T_grating = np.zeros((size_n, size_m, size_f)) ## initialize with data type grating_S = np.zeros((size_n, size_m, size_f), dtype=np.complex_) ## MATLAB and Lumerical start from 1, but python starts from 0 ## 1 dimension closest value's index n1 = abs(n - 0).argmin() ## n is an array ## 2 dimension closest values' index u1i = abs(u1_new - u1[:, np.newaxis]).argmin(axis = 1) u2i = abs(u2_new - u2[:, np.newaxis]).argmin(axis = 1) T_nm_new[np.ix_(u1i,u2i)] = T_nm + 1e-18 ## different with MATLAB ## meshgrid indexing, opposite to MATLAB, but more intuitive np.meshgrid(u1, u2, indexing='ij') ## real transmitted power power1 = fdtd.transmission(mname).flatten() power1 = power1[fpoint] * fdtd.sourcepower(f) ## interp3d method 1 tempX,tempY,tempZ = np.meshgrid(tempx,tempy,tempz,indexing = 'ij') pts = np.vstack((tempX.flatten(),tempY.flatten(),tempZ.flatten())).transpose() temp_interp_func = interpolate.RegularGridInterpolator((xt,yt,zt), E2t) E2t = temp_interp_func(pts).reshape((xt.size,yt.size,zt.size)) ## interp3d method 2 tempX, tempY, tempZ = np.meshgrid(tempx, tempy, tempz, indexing='ij') pts = np.vstack( (tempX.flatten(), tempY.flatten(), tempZ.flatten())).transpose() E2t = interpolate.interpn((xt, yt, zt), E2t, pts).reshape( (xt.size, yt.size, zt.size)) 1d plot with plt.xkcd(): fig, ax = plt.subplots(dpi = 100) ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) ## ax.set_xticks([]) ## ax.set_yticks([]) ax.plot(lam/1e-6,theta_01, label = \"Theta\") ax.plot(lam/1e-6,phi_01, label = \"Phi\") ax.set_xlim(0.85,1) ax.set_ylim(70,91) ax.set_xlabel(r'Wavelength ($\\mathrm{\\mu m}$)') ax.set_ylabel(\"Diffraction angle for \"+str(n_target)+\",\"+str(m_target)+\") order\") ax.legend() 2d plot with interp2d ## create image x = E_image[\"x\"]*1e6 ## data on uniform grid, convert m to um y = E_image[\"y\"]*1e6 ## data on uniform grid, convert m to um Ex = E_image[\"E\"][:,:,0,0,0] ## data on uniform grid, selecting the x-component of first frequency Ex_abs = abs(Ex) xi = numpy.linspace(numpy.amin(x),numpy.amax(x),len(x)) yi = numpy.linspace(numpy.amin(y),numpy.amax(y),len(y)) f= interpolate.interp2d(y,x,Ex_abs) Exi_abs = f(yi, xi) im = plt.imshow(numpy.transpose(Exi_abs), aspect='equal', interpolation='bicubic', cmap=cm.RdYlGn, origin='lower', extent=[xi.min(), xi.max(), yi.min(), yi.max()], vmax=Exi_abs.max(), vmin=Exi_abs.min()) plt.colorbar() plt.xlabel('x (um)') plt.ylabel('y (um)') indices=numpy.where(Exi_abs==Exi_abs.max()) ## finding the location of max abs(Ex) plt.annotate('local max', xy=(xi[indices[0]], yi[indices[1]]), xytext=(0.7, -0.2), arrowprops=dict(arrowstyle=\"-\")) plt.savefig(\"image_plot.png\") plt.show() 2d subplots Xt, Zt = np.meshgrid(xt, zt, indexing='ij') with plt.xkcd(): fig, axes = plt.subplots(1, 2, dpi=100, figsize=(10, 4)) ax = axes[0] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2t, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by FDTD at \" + str(np.round(lam * 1e9, 3)) + \"nm\") ax = axes[1] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2p, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by projection at \" + str(np.round(lam * 1e9, 3)) + \"nm\") plt.tight_layout() custom functions def addattribute(dataset_name, attribute_name, attribute_data): ''' Help on method addattribute: addattribute(dataset_name, attribute_name, attribute_data) method of lumapi.FDTD instance Adds an attribute to an existing dataset. +--------------------------------------+--------------------------------------+ | Syntax | Description | +-------------------------------","date":"2021-08-16","objectID":"/fdtd_basics/:9:9","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#2d-subplots"},{"categories":["Academic"],"content":"useful code snippets ## make sure it is a \"1d array\", numpy type n = np.array(fdtd.gratingn(mname, size_f)).flatten() ## MATLAB length() size_n = n.size ## MATLAB zeros(), input should be a tuple T_grating = np.zeros((size_n, size_m, size_f)) ## initialize with data type grating_S = np.zeros((size_n, size_m, size_f), dtype=np.complex_) ## MATLAB and Lumerical start from 1, but python starts from 0 ## 1 dimension closest value's index n1 = abs(n - 0).argmin() ## n is an array ## 2 dimension closest values' index u1i = abs(u1_new - u1[:, np.newaxis]).argmin(axis = 1) u2i = abs(u2_new - u2[:, np.newaxis]).argmin(axis = 1) T_nm_new[np.ix_(u1i,u2i)] = T_nm + 1e-18 ## different with MATLAB ## meshgrid indexing, opposite to MATLAB, but more intuitive np.meshgrid(u1, u2, indexing='ij') ## real transmitted power power1 = fdtd.transmission(mname).flatten() power1 = power1[fpoint] * fdtd.sourcepower(f) ## interp3d method 1 tempX,tempY,tempZ = np.meshgrid(tempx,tempy,tempz,indexing = 'ij') pts = np.vstack((tempX.flatten(),tempY.flatten(),tempZ.flatten())).transpose() temp_interp_func = interpolate.RegularGridInterpolator((xt,yt,zt), E2t) E2t = temp_interp_func(pts).reshape((xt.size,yt.size,zt.size)) ## interp3d method 2 tempX, tempY, tempZ = np.meshgrid(tempx, tempy, tempz, indexing='ij') pts = np.vstack( (tempX.flatten(), tempY.flatten(), tempZ.flatten())).transpose() E2t = interpolate.interpn((xt, yt, zt), E2t, pts).reshape( (xt.size, yt.size, zt.size)) 1d plot with plt.xkcd(): fig, ax = plt.subplots(dpi = 100) ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) ## ax.set_xticks([]) ## ax.set_yticks([]) ax.plot(lam/1e-6,theta_01, label = \"Theta\") ax.plot(lam/1e-6,phi_01, label = \"Phi\") ax.set_xlim(0.85,1) ax.set_ylim(70,91) ax.set_xlabel(r'Wavelength ($\\mathrm{\\mu m}$)') ax.set_ylabel(\"Diffraction angle for \"+str(n_target)+\",\"+str(m_target)+\") order\") ax.legend() 2d plot with interp2d ## create image x = E_image[\"x\"]*1e6 ## data on uniform grid, convert m to um y = E_image[\"y\"]*1e6 ## data on uniform grid, convert m to um Ex = E_image[\"E\"][:,:,0,0,0] ## data on uniform grid, selecting the x-component of first frequency Ex_abs = abs(Ex) xi = numpy.linspace(numpy.amin(x),numpy.amax(x),len(x)) yi = numpy.linspace(numpy.amin(y),numpy.amax(y),len(y)) f= interpolate.interp2d(y,x,Ex_abs) Exi_abs = f(yi, xi) im = plt.imshow(numpy.transpose(Exi_abs), aspect='equal', interpolation='bicubic', cmap=cm.RdYlGn, origin='lower', extent=[xi.min(), xi.max(), yi.min(), yi.max()], vmax=Exi_abs.max(), vmin=Exi_abs.min()) plt.colorbar() plt.xlabel('x (um)') plt.ylabel('y (um)') indices=numpy.where(Exi_abs==Exi_abs.max()) ## finding the location of max abs(Ex) plt.annotate('local max', xy=(xi[indices[0]], yi[indices[1]]), xytext=(0.7, -0.2), arrowprops=dict(arrowstyle=\"-\")) plt.savefig(\"image_plot.png\") plt.show() 2d subplots Xt, Zt = np.meshgrid(xt, zt, indexing='ij') with plt.xkcd(): fig, axes = plt.subplots(1, 2, dpi=100, figsize=(10, 4)) ax = axes[0] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2t, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by FDTD at \" + str(np.round(lam * 1e9, 3)) + \"nm\") ax = axes[1] ax.spines['right'].set_visible(False) ax.spines['top'].set_visible(False) p = ax.pcolormesh(Xt * 1e6, Zt * 1e6, E2p, shading='auto') cb = fig.colorbar(p, ax=ax) ax.set_xlabel('x (microns)') ax.set_ylabel('z (microns)') ax.set_title(\"|E|^2 by projection at \" + str(np.round(lam * 1e9, 3)) + \"nm\") plt.tight_layout() custom functions def addattribute(dataset_name, attribute_name, attribute_data): ''' Help on method addattribute: addattribute(dataset_name, attribute_name, attribute_data) method of lumapi.FDTD instance Adds an attribute to an existing dataset. +--------------------------------------+--------------------------------------+ | Syntax | Description | +-------------------------------","date":"2021-08-16","objectID":"/fdtd_basics/:9:9","series":["FDTD"],"tags":["Python"],"title":"FDTD Basics","uri":"/fdtd_basics/#custom-functions"},{"categories":null,"content":"关于 ","date":"2021-08-16","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于 FakePhysicist","uri":"/about/#关于"},{"categories":null,"content":"关于作者 🤪 强迫症与拖延症患者 🤔 热衷于了解世界的运转机制 ❤️ 爱好 ","date":"2021-08-16","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于 FakePhysicist","uri":"/about/#关于作者"},{"categories":null,"content":"Haha穷且益坚，不坠青云之志The Road Not Taken \" 穷且益坚，不坠青云之志 滕王阁序 时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！ 勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？ ","date":"2021-08-16","objectID":"/about/:2:0","series":null,"tags":null,"title":"关于 FakePhysicist","uri":"/about/#haha"},{"categories":null,"content":"My Github chart ","date":"2021-08-16","objectID":"/about/:3:0","series":null,"tags":null,"title":"关于 FakePhysicist","uri":"/about/#my-github-chart"},{"categories":["Tossing"],"content":"在 wsl 环境下安装 Hugo 并且配置主题 DoIt. ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:0:0","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#"},{"categories":["Tossing"],"content":"Hugo","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:1:0","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#hugo"},{"categories":["Tossing"],"content":"安装Install Hugo ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:1:1","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#安装"},{"categories":["Tossing"],"content":"常用命令 hugo 编译项目生成静态网站，默认位置在项目的 public 目录下 hugo server --disableFastRender -D 预览网站内容 hugo new {folder}/{name}.md 创建新文章，使用 markdown 进行排版，一般默认放在 posts 文件夹下； 基本没了，一般情况下用这三个命令就够了. 但是要注意, 需要在项目的根目录下执行这些命令. ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:1:2","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#常用命令"},{"categories":["Tossing"],"content":"DoIt","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:2:0","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#doit"},{"categories":["Tossing"],"content":"安装项目主页 DoIt 文档说明 DoIt Documentation 创建你的项目, Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt 初始化项目：git submodule update --init --recursive，完成安装 自动更新 submodule：git submodule update --remote --merge; ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:2:1","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#安装-1"},{"categories":["Tossing"],"content":"项目文件树结构 . ├── archetypes # markdown文章的模版 ├── config.toml # 配置文件 ├── content # 网站内容，主要保存文章 ├── data # 生成网站可用的数据文件，可用在模版中 ├── layouts # 生成网站时可用的模版 ├── public # 通过hugo命令生成的静态文件，主要发布这个 ├── resources # 通过hugo命令一起生成的资源文件，暂时不知道什么用 ├── static # 静态文件，比如文章中的图片/视频文件、缩略图等 └── themes # 保存可用的hugo主题 通常，我们只会用到以下几个文件夹的东西 config.toml ：保存 hugo 的配置，包括主题的配置等.详细设置见这里. content ：保存网站的各种内容，比如文章. archetypes ： 保存文章的 markdown 模版，通常包括文章的前缀注释，是一些在创建新文章时会被用到. static ：保存文章中用到的静态文件，比如图片、网站缩略图等. public ：通过hugo命令生成的静态 html 文件、css、js 等.在服务器上发布时主要发布这个文件夹. ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:2:2","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#项目文件树结构"},{"categories":["Tossing"],"content":"开始写第一篇文章","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:3:0","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#开始写第一篇文章"},{"categories":["Tossing"],"content":"生成新文章生成新文章hello-world的命令： hugo new posts/hello-world/index.md 执行完成后，在./content/posts目录下应该可以看到新文件，同时里面已经有 markdown 模版中的文章前缀参数. 也可以手动复制旧文章来生成新文章，不通过命令. 也可以在content文件夹下建新的文件夹，方便管理.这种情况下生成的静态 Html 文件路由效果如下： . └── content └── about | └── index.md // \u003c- https://example.com/about/ ├── posts | ├── firstpost.md // \u003c- https://example.com/posts/firstpost/ | ├── happy | | └── ness.md // \u003c- https://example.com/posts/happy/ness/ | └── secondpost.md // \u003c- https://example.com/posts/secondpost/ └── quote ├── first.md // \u003c- https://example.com/quote/first/ └── second.md // \u003c- https://example.com/quote/second/ ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:3:1","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#生成新文章"},{"categories":["Tossing"],"content":"本地调试 hugo server --disableFastRender ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:3:2","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#本地调试"},{"categories":["Tossing"],"content":"Github Repository两个 Repositories Repository 1: 一个用于托管博客项目源文件, 设置权限为 Private Repository 2: 一个用于托管博客编译后生成的静态文件, 设置权限为 Public ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:4:0","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#github-repository"},{"categories":["Tossing"],"content":"Repository 1设置为private权限等级，没人看得见 链接本地仓库与远端仓库 ## 位于博客源代码根目录 ## 初始化本地Git仓库 git init ## 添加名为 Origin 的远端Git仓库 git remote add origin {{这里替换成你的仓库在Github `git clone`用的地址}} ## 选择所有文件 git add -A ## Push到github git push -u origin master 或者直接用 VSCode 链接本地仓库与远端 Github 仓库. 创建.gitignore在源代码项目中创建.gitignore文件，来防止把生成的静态文件上传 参考 gitignore.io # Created by https://www.toptal.com/developers/gitignore/api/hugo # Edit at https://www.toptal.com/developers/gitignore?templates=hugo ### Hugo ### # Generated files by hugo /public/ /resources/_gen/ # Executable may be added to repository hugo.exe hugo.darwin hugo.linux # End of https://www.toptal.com/developers/gitignore/api/hugo ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:4:1","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#repository-1"},{"categories":["Tossing"],"content":"Repository 1设置为private权限等级，没人看得见 链接本地仓库与远端仓库 ## 位于博客源代码根目录 ## 初始化本地Git仓库 git init ## 添加名为 Origin 的远端Git仓库 git remote add origin {{这里替换成你的仓库在Github `git clone`用的地址}} ## 选择所有文件 git add -A ## Push到github git push -u origin master 或者直接用 VSCode 链接本地仓库与远端 Github 仓库. 创建.gitignore在源代码项目中创建.gitignore文件，来防止把生成的静态文件上传 参考 gitignore.io # Created by https://www.toptal.com/developers/gitignore/api/hugo # Edit at https://www.toptal.com/developers/gitignore?templates=hugo ### Hugo ### # Generated files by hugo /public/ /resources/_gen/ # Executable may be added to repository hugo.exe hugo.darwin hugo.linux # End of https://www.toptal.com/developers/gitignore/api/hugo ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:4:1","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#链接本地仓库与远端仓库"},{"categories":["Tossing"],"content":"Repository 1设置为private权限等级，没人看得见 链接本地仓库与远端仓库 ## 位于博客源代码根目录 ## 初始化本地Git仓库 git init ## 添加名为 Origin 的远端Git仓库 git remote add origin {{这里替换成你的仓库在Github `git clone`用的地址}} ## 选择所有文件 git add -A ## Push到github git push -u origin master 或者直接用 VSCode 链接本地仓库与远端 Github 仓库. 创建.gitignore在源代码项目中创建.gitignore文件，来防止把生成的静态文件上传 参考 gitignore.io # Created by https://www.toptal.com/developers/gitignore/api/hugo # Edit at https://www.toptal.com/developers/gitignore?templates=hugo ### Hugo ### # Generated files by hugo /public/ /resources/_gen/ # Executable may be added to repository hugo.exe hugo.darwin hugo.linux # End of https://www.toptal.com/developers/gitignore/api/hugo ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:4:1","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#创建gitignore"},{"categories":["Tossing"],"content":"Repository 2创建仓库，注意名称第二个仓库名字比较重要，必须是 {{你的github用户名}}.github.io. 比如我的 Github 名字为 FakePhysicist, 那么我需要创建的仓库名称为 fakephysicist.github.io. 同时注意要设置为 Public 权限等级. 在仓库设置里设置启用Github Pages设置 Branch 为 main, 静态文件位置为/(root), 原因是我们在下个步骤中会直接将生成的 public 文件夹中的内容 push 到 main 分支的 / 目录下. ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:4:2","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#repository-2"},{"categories":["Tossing"],"content":"Repository 2创建仓库，注意名称第二个仓库名字比较重要，必须是 {{你的github用户名}}.github.io. 比如我的 Github 名字为 FakePhysicist, 那么我需要创建的仓库名称为 fakephysicist.github.io. 同时注意要设置为 Public 权限等级. 在仓库设置里设置启用Github Pages设置 Branch 为 main, 静态文件位置为/(root), 原因是我们在下个步骤中会直接将生成的 public 文件夹中的内容 push 到 main 分支的 / 目录下. ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:4:2","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#创建仓库注意名称"},{"categories":["Tossing"],"content":"Repository 2创建仓库，注意名称第二个仓库名字比较重要，必须是 {{你的github用户名}}.github.io. 比如我的 Github 名字为 FakePhysicist, 那么我需要创建的仓库名称为 fakephysicist.github.io. 同时注意要设置为 Public 权限等级. 在仓库设置里设置启用Github Pages设置 Branch 为 main, 静态文件位置为/(root), 原因是我们在下个步骤中会直接将生成的 public 文件夹中的内容 push 到 main 分支的 / 目录下. ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:4:2","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#在仓库设置里设置启用github-pages"},{"categories":["Tossing"],"content":"手工发布(更好, 不会有网页渲染问题) 将hugo命令生成的public文件夹上传到 GitHub pages 项目下。 在 my_website 目录下执行 git submodule update --init --recursive 将子模块更新到最新状态. 在 config.toml 中, 设置 baseurl = https://\u003cUSERNAME\u003e.github.io/. 确保 public 文件夹被删除. 将 \u003cUSERNAME\u003e.github.io repository 设置为一个 submodule, 并设置其在文件夹 public 中. git submodule add -f -b main https://github.com/\u003cUSERNAME\u003e/\u003cUSERNAME\u003e.github.io.git public 生成网页, 并将其推送到 repository 2. hugo cd public git add . git commit -m \"Build website\" git push origin main cd .. add, commit and push repository 1. git add . git commit -m \"Initial commit\" git push -u origin master ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:5:0","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#手工发布"},{"categories":["Tossing"],"content":"Github Action 发布(不推荐, 会有网页渲染问题) ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:6:0","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#github-action-发布"},{"categories":["Tossing"],"content":"创建 CI 脚本在源代码项目根目录下新建.github/workflow/main.yml.(通过 Github Action 网页端操作也可以) main.yml脚本内容： # This is a basic workflow to help you get started with Actionsname:CI# Controls when the action will run.on:# Triggers the workflow on push or pull request events but only for the master branchpush:branches:[master]pull_request:branches:[master]# Allows you to run this workflow manually from the Actions tabworkflow_dispatch:# A workflow run is made up of one or more jobs that can run sequentially or in paralleljobs:# This workflow contains a single job called \"build\"build:# The type of runner that the job will run onruns-on:ubuntu-latest# Steps represent a sequence of tasks that will be executed as part of the jobsteps:# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it- uses:actions/checkout@v3with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugo# You may pin to the exact commit or the version.uses:peaceiris/actions-hugo@v2with:# The Hugo version to download (if necessary) and use. Example: 0.58.2hugo-version:latest# optional, default is latest# Download (if necessary) and use Hugo extended version. Example: trueextended:true# optional, default is false- name:Buildrun:hugo --minify- name:Pushes to another repositoryuses:cpina/github-action-push-to-another-repository@mainenv:API_TOKEN_GITHUB:${{ secrets.API_TOKEN_GITHUB }}with:target-branch:\"main\"source-directory:\"public\"destination-github-username:\"这里输入你的Github用户名\"destination-repository-name:\"这里输入你的Github用户名.github.io\"user-email:这里输入你的 Github no-reply 邮箱 ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:6:1","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#创建-ci-脚本"},{"categories":["Tossing"],"content":"设置 Push 用的密钥为了让 Github Action 脚本有权限将代码 Push 到我们的 xxx.github.io 仓库，我们需要申请一个密钥并告诉它.在 Github 设置中找到 Developer settings/Personal access tokens 新建一个密钥，权限设置把 Repo 打勾. 复制密钥. 回到第一个仓库的设置里，选择Secrets 新建密钥，将刚才生成的密钥填进去，名字设为 API_TOKEN_GITHUB (跟 CI 脚本里的名称对应即可) ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:6:2","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#设置-push-用的密钥"},{"categories":["Tossing"],"content":"使用 Math shortcode可以顺利使用 KaTeX 的 Math shortcode. 参考 这样可以省去使用转义字符\\的麻烦. 不用出现\\\\\\\\, \\_, \\* 这样奇奇怪怪的东西. 参考. 使用方法: \\begin{aligned} \\frac{1}{2} \u0026= \\frac{1}{2} \\\\ \\end{aligned} ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:7:0","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#使用-math-shortcode"},{"categories":["Tossing"],"content":"评论系统 giscus在 config.toml 中启用评论系统 具体配置参考 giscus. ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:8:0","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#评论系统-giscus"},{"categories":["Tossing"],"content":"中文排版指南中文文案排版指北 主要就是说: 中英文之间要有空格 中文与数字之间要有空格 ","date":"2021-01-01","objectID":"/how-to-build-a-website-with-hugo/:9:0","series":[],"tags":["Hugo","DoIt"],"title":"Hugo + DoIt 创建个人主页","uri":"/how-to-build-a-website-with-hugo/#中文排版指南"},{"categories":null,"content":"Stay","date":"0001-01-01","objectID":"/love/:0:0","series":null,"tags":null,"title":"","uri":"/love/#stay"},{"categories":null,"content":"Since 2019/8/14","date":"0001-01-01","objectID":"/since/:0:0","series":null,"tags":null,"title":"","uri":"/since/#since-2019814"},{"categories":null,"content":"我已经在美国待了 var countDownDate = new Date('2019-08-14T00:00:00').getTime(); window.setInterval(function() { var distance = new Date().getTime() - countDownDate; var days = Math.floor(distance / (1000 * 60 * 60 * 24)); var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)); var seconds = Math.floor((distance % (1000 * 60)) / 1000); document.getElementById(\"since\").innerHTML = days + ' 天 ' + hours + ' 时 ' + minutes + ' 分 ' + seconds + ' 秒'; }, 1000); ","date":"0001-01-01","objectID":"/since/:1:0","series":null,"tags":null,"title":"","uri":"/since/#我已经在美国待了"},{"categories":null,"content":" 你没有连接至互联网, 只有缓存的页面可用. ","date":"0001-01-01","objectID":"/offline/:0:0","series":null,"tags":null,"title":"Offline","uri":"/offline/#"}]