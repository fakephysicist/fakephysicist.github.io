[{"categories":["tricks"],"content":"As a solo developer working locally, you don‚Äôt need to worry about remotes (push, pull, etc.) yet ‚Äî just the core Git workflow to track versions, explore ideas, and organize your work. ","date":"2025-05-11","objectID":"/posts/git-personal-use/:0:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#"},{"categories":["tricks"],"content":" Setup (once per repo) bash git init Start tracking a new directory. This creates a .git folder in the current directory. bash git config --local user.name \"Your Name\" git config --local user.email \"your@email.com\" Set your identity (needed for commits). ","date":"2025-05-11","objectID":"/posts/git-personal-use/:1:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#setup-once-per-repo"},{"categories":["tricks"],"content":" Check status bash git status See what‚Äôs changed, what‚Äôs staged, and what‚Äôs untracked. ","date":"2025-05-11","objectID":"/posts/git-personal-use/:2:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#check-status"},{"categories":["tricks"],"content":" Track files bash git add file.py Stage a file for commit. bash git add . Stage all changes. ","date":"2025-05-11","objectID":"/posts/git-personal-use/:3:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#track-files"},{"categories":["tricks"],"content":" Commit changes bash git commit -m \"Your commit message\" Saves a snapshot of the current state. ","date":"2025-05-11","objectID":"/posts/git-personal-use/:4:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#commit-changes"},{"categories":["tricks"],"content":" Version tagsAfter committing, you can tag a version for easy reference later. bash git tag List all tags. bash git tag -a v1.0 -m \"First version\" Tag the current commit with a version. ","date":"2025-05-11","objectID":"/posts/git-personal-use/:5:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#version-tags"},{"categories":["tricks"],"content":" View history bash git log --oneline Compact commit history. A typical output looks like this: text a1b2c3d (HEAD -\u003e main) Your commit message e4f5g6h Previous commit message f7h8i9j Another commit message Here, a1b2c3d is the commit hash, and HEAD -\u003e main indicates that this commit is on the main branch. The commit hash is a unique identifier for each commit. The tag v1.0 is a label for a specific commit, making it easier to reference later. ","date":"2025-05-11","objectID":"/posts/git-personal-use/:6:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#view-history"},{"categories":["tricks"],"content":" Undo mistakes bash git restore file.py Undo changes to a file (Goes back to the last commit). bash git restore --staged file.py Unstage a file (still keeps changes in the working directory). ","date":"2025-05-11","objectID":"/posts/git-personal-use/:7:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#undo-mistakes"},{"categories":["tricks"],"content":" Branching bash git branch List all branches. bash git branch new-branch Create a new branch. bash git switch new-branch Switch to a branch. bash git switch -c new-branch Create and switch to a new branch. bash git switch main Switch back to the main branch. bash git merge new-branch Merge changes from new-branch into the current branch. bash git branch -d new-branch Delete the branch after merging. ","date":"2025-05-11","objectID":"/posts/git-personal-use/:8:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#branching"},{"categories":["tricks"],"content":" Checkout a commit/tag bash git switch --detach a1b2c3d Checkout a specific commit. This puts you in a ‚Äúdetached HEAD‚Äù state, meaning you‚Äôre not on any branch (orphaned). Then you create a new branch from this commit. bash git switch -detach v1.0 Checkout a specific tag. This also puts you in a ‚Äúdetached HEAD‚Äù state. After checking out a commit or tag, you can create a new branch from it: bash git switch -c fix-on-v1.0 This creates a new branch called fix-on-v1.0 starting from the commit or tag you checked out. ","date":"2025-05-11","objectID":"/posts/git-personal-use/:9:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#checkout-a-committag"},{"categories":["tricks"],"content":" Clean commit history bash git rebase -i HEAD~n Interactively rebase the last n commits. pick: Keep the commit squash: Combine with the previous commit drop: Remove the commit bash git reset --soft HEAD~n Undo the last n commits but keep changes in the working directory. bash git reset --soft HEAD~n Undo the last n commits and remove changes from the working directory. ","date":"2025-05-11","objectID":"/posts/git-personal-use/:10:0","series":[],"tags":["git"],"title":"Git Personal Use","uri":"/posts/git-personal-use/#clean-commit-history"},{"categories":["tricks"],"content":"In this post, I will show you how to write LaTeX on macOS. The text editor I will be using is VSCode. The procedure has been tested on macOS Sequoia. ","date":"2024-08-10","objectID":"/posts/latex-basics/:0:0","series":[],"tags":["latex"],"title":"LaTeX Basics","uri":"/posts/latex-basics/#"},{"categories":["tricks"],"content":" InstallationIn the terminal, run the following commands: bash brew install --cask mactex brew install perl brew install cpanminus cpanm Unicode::GCString cpanm YAML::Tiny cpanm File::HomeDir The perl and cpanminus commands are used to install the necessary Perl modules for LaTeX. Without these modules, code format will not work in VSCode. In VSCode, install the LaTeX Workshop extension. ","date":"2024-08-10","objectID":"/posts/latex-basics/:1:0","series":[],"tags":["latex"],"title":"LaTeX Basics","uri":"/posts/latex-basics/#installation"},{"categories":["tricks"],"content":" Setup in VSCodeCopy and paste the following code into your settings.json file: json \"latex-workshop.latex.tools\": [ { \"name\": \"latexmk\", \"command\": \"latexmk\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"-pdf\", \"-outdir=%OUTDIR%\", \"%DOC%\" ], \"env\": {} }, { \"name\": \"xelatex\", \"command\": \"xelatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ], \"env\": {} }, { \"name\": \"pdflatex\", \"command\": \"pdflatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ], \"env\": {} }, { \"name\": \"bibtex\", \"command\": \"bibtex\", \"args\": [ \"%DOCFILE%\" ], \"env\": {} } ], \"latex-workshop.latex.recipes\": [ { \"name\": \"pdfLaTeX\", \"tools\": [ \"pdflatex\" ] }, { \"name\": \"latexmk üîÉ\", \"tools\": [ \"latexmk\" ] }, { \"name\": \"xelatex\", \"tools\": [ \"xelatex\" ] }, { \"name\": \"pdflatex ‚ûû bibtex ‚ûû pdflatex`√ó2\", \"tools\": [ \"pdflatex\", \"bibtex\", \"pdflatex\", \"pdflatex\" ] }, { \"name\": \"xelatex ‚ûû bibtex ‚ûû xelatex`√ó2\", \"tools\": [ \"xelatex\", \"bibtex\", \"xelatex\", \"xelatex\" ] } ], ","date":"2024-08-10","objectID":"/posts/latex-basics/:2:0","series":[],"tags":["latex"],"title":"LaTeX Basics","uri":"/posts/latex-basics/#setup-in-vscode"},{"categories":["tricks"],"content":"In this post, I will show you how to compile Mitsuba from source code. Follow the instructions in the documentation to compile the project. ","date":"2024-08-04","objectID":"/posts/compile-mitsuba/:0:0","series":[],"tags":["mitsuba"],"title":"Compile Mitsuba","uri":"/posts/compile-mitsuba/#"},{"categories":["tricks"],"content":" Compile Mitsuba","date":"2024-08-04","objectID":"/posts/compile-mitsuba/:1:0","series":[],"tags":["mitsuba"],"title":"Compile Mitsuba","uri":"/posts/compile-mitsuba/#compile-mitsuba"},{"categories":["tricks"],"content":" Clone the Repository bash git clone --recursive https://github.com/mitsuba-renderer/mitsuba3 ","date":"2024-08-04","objectID":"/posts/compile-mitsuba/:1:1","series":[],"tags":["mitsuba"],"title":"Compile Mitsuba","uri":"/posts/compile-mitsuba/#clone-the-repository"},{"categories":["tricks"],"content":" Switch to the Most Recent VersionSwitch to the most recent version of the repository. For example, if the current version is v3.5.2, switch to tag v3.5.3: bash git checkout v3.5.3 ","date":"2024-08-04","objectID":"/posts/compile-mitsuba/:1:2","series":[],"tags":["mitsuba"],"title":"Compile Mitsuba","uri":"/posts/compile-mitsuba/#switch-to-the-most-recent-version"},{"categories":["tricks"],"content":" Recursively Update the Submodules bash git submodule update --init --recursive ","date":"2024-08-04","objectID":"/posts/compile-mitsuba/:1:3","series":[],"tags":["mitsuba"],"title":"Compile Mitsuba","uri":"/posts/compile-mitsuba/#recursively-update-the-submodules"},{"categories":["tricks"],"content":" Compile the Project bash mkdir build cd build cmake -GNinja .. This should generate a build directory with a mitsuba.conf file. You should set the variants you want to compile in this file. For example, to compile the scalar_rgb, scalar_spectral, scalar_spectral_polarized, llvm_spectral, llvm_spectral_polarized, and llvm_ad_rgb variants, the mitsuba.conf file should look like this: text \"enabled\": [ \"scalar_rgb\", \"scalar_spectral\", \"scalar_spectral_polarized\", \"llvm_spectral\", \"llvm_spectral_polarized\", \"llvm_ad_rgb\" ], Then, compile the project: bash ninja ","date":"2024-08-04","objectID":"/posts/compile-mitsuba/:1:4","series":[],"tags":["mitsuba"],"title":"Compile Mitsuba","uri":"/posts/compile-mitsuba/#compile-the-project"},{"categories":["tricks"],"content":" Using Mitsuba in PythonTo call the compiled version of Mitsuba in python or Jupyter, add the path of the compiled python module to the python path. For example, if the path to the compiled python module is /Users/your_username/mitsuba3/build/python, you can add this path to the python path by running the following code: python import sys sys.path.insert(0, '/Users/your_username/mitsuba3/build/python') This can work only temporarily. If you quit the python session, or restart the Jupyter kernel, you will have to run this code again. ","date":"2024-08-04","objectID":"/posts/compile-mitsuba/:2:0","series":[],"tags":["mitsuba"],"title":"Compile Mitsuba","uri":"/posts/compile-mitsuba/#using-mitsuba-in-python"},{"categories":["tricks"],"content":" Import MitsubaThen, you can then import Mitsuba as usual: python import drjit as dr import mitsuba as mi ","date":"2024-08-04","objectID":"/posts/compile-mitsuba/:2:1","series":[],"tags":["mitsuba"],"title":"Compile Mitsuba","uri":"/posts/compile-mitsuba/#import-mitsuba"},{"categories":["tricks"],"content":" Check the Version of MitsubaTo check if the correct version of Mitsuba is being used, you can run the following code: python mi.variants() mi.set_variant('llvm_spectral_polarized') print(mi.MI_VERSION) This code will print the available variants and the version of Mitsuba being used. Also, it tests if the variant llvm_spectral_polarized is available. ","date":"2024-08-04","objectID":"/posts/compile-mitsuba/:2:2","series":[],"tags":["mitsuba"],"title":"Compile Mitsuba","uri":"/posts/compile-mitsuba/#check-the-version-of-mitsuba"},{"categories":["tricks"],"content":"Some basics about setting up a development environment on macOS. ","date":"2023-10-04","objectID":"/posts/macos-setup/:0:0","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#"},{"categories":["tricks"],"content":" XcodeIn the terminal, run bash sudo xcode-select --install ","date":"2023-10-04","objectID":"/posts/macos-setup/:1:0","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#xcode"},{"categories":["tricks"],"content":" Homebrew bash /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" ","date":"2023-10-04","objectID":"/posts/macos-setup/:2:0","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#homebrew"},{"categories":["tricks"],"content":" Oh My ZshInstall Zsh first: bash brew install zsh Then install Oh My Zsh: bash sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" ","date":"2023-10-04","objectID":"/posts/macos-setup/:3:0","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#oh-my-zsh"},{"categories":["tricks"],"content":" PluginsEdit ~/.zshrc: bash plugins=( sudo extract autojump zsh-autosuggestions zsh-syntax-highlighting ) sudoPress ESC twice to add sudo to the beginning of the command. extractUse x abc.zip to extract abc.zip. It supports almost all compressed formats. autojump bash brew install autojump Follow the instructions to add the following line to ~/.zshrc: bash # \u003e\u003e\u003e autojump initialize \u003e\u003e\u003e [ -f /opt/homebrew/etc/profile.d/autojump.sh ] \u0026\u0026 . /opt/homebrew/etc/profile.d/autojump.sh # \u003c\u003c\u003c autojump initialize \u003c\u003c\u003c Use j to jump to the matching directory. bash j \u003ckeyword\u003e zsh-autosuggestionsauto-suggestion for zsh. It suggests commands based on your command history. bash git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions zsh-syntax-highlightingSyntax highlighting for zsh. It should be the last plugin in the plugins list. bash git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ","date":"2023-10-04","objectID":"/posts/macos-setup/:3:1","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#plugins"},{"categories":["tricks"],"content":" PluginsEdit ~/.zshrc: bash plugins=( sudo extract autojump zsh-autosuggestions zsh-syntax-highlighting ) sudoPress ESC twice to add sudo to the beginning of the command. extractUse x abc.zip to extract abc.zip. It supports almost all compressed formats. autojump bash brew install autojump Follow the instructions to add the following line to ~/.zshrc: bash # \u003e\u003e\u003e autojump initialize \u003e\u003e\u003e [ -f /opt/homebrew/etc/profile.d/autojump.sh ] \u0026\u0026 . /opt/homebrew/etc/profile.d/autojump.sh # \u003c\u003c\u003c autojump initialize \u003c\u003c\u003c Use j to jump to the matching directory. bash j zsh-autosuggestionsauto-suggestion for zsh. It suggests commands based on your command history. bash git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions zsh-syntax-highlightingSyntax highlighting for zsh. It should be the last plugin in the plugins list. bash git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ","date":"2023-10-04","objectID":"/posts/macos-setup/:3:1","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#sudo"},{"categories":["tricks"],"content":" PluginsEdit ~/.zshrc: bash plugins=( sudo extract autojump zsh-autosuggestions zsh-syntax-highlighting ) sudoPress ESC twice to add sudo to the beginning of the command. extractUse x abc.zip to extract abc.zip. It supports almost all compressed formats. autojump bash brew install autojump Follow the instructions to add the following line to ~/.zshrc: bash # \u003e\u003e\u003e autojump initialize \u003e\u003e\u003e [ -f /opt/homebrew/etc/profile.d/autojump.sh ] \u0026\u0026 . /opt/homebrew/etc/profile.d/autojump.sh # \u003c\u003c\u003c autojump initialize \u003c\u003c\u003c Use j to jump to the matching directory. bash j zsh-autosuggestionsauto-suggestion for zsh. It suggests commands based on your command history. bash git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions zsh-syntax-highlightingSyntax highlighting for zsh. It should be the last plugin in the plugins list. bash git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ","date":"2023-10-04","objectID":"/posts/macos-setup/:3:1","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#extract"},{"categories":["tricks"],"content":" PluginsEdit ~/.zshrc: bash plugins=( sudo extract autojump zsh-autosuggestions zsh-syntax-highlighting ) sudoPress ESC twice to add sudo to the beginning of the command. extractUse x abc.zip to extract abc.zip. It supports almost all compressed formats. autojump bash brew install autojump Follow the instructions to add the following line to ~/.zshrc: bash # \u003e\u003e\u003e autojump initialize \u003e\u003e\u003e [ -f /opt/homebrew/etc/profile.d/autojump.sh ] \u0026\u0026 . /opt/homebrew/etc/profile.d/autojump.sh # \u003c\u003c\u003c autojump initialize \u003c\u003c\u003c Use j to jump to the matching directory. bash j zsh-autosuggestionsauto-suggestion for zsh. It suggests commands based on your command history. bash git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions zsh-syntax-highlightingSyntax highlighting for zsh. It should be the last plugin in the plugins list. bash git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ","date":"2023-10-04","objectID":"/posts/macos-setup/:3:1","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#autojump"},{"categories":["tricks"],"content":" PluginsEdit ~/.zshrc: bash plugins=( sudo extract autojump zsh-autosuggestions zsh-syntax-highlighting ) sudoPress ESC twice to add sudo to the beginning of the command. extractUse x abc.zip to extract abc.zip. It supports almost all compressed formats. autojump bash brew install autojump Follow the instructions to add the following line to ~/.zshrc: bash # \u003e\u003e\u003e autojump initialize \u003e\u003e\u003e [ -f /opt/homebrew/etc/profile.d/autojump.sh ] \u0026\u0026 . /opt/homebrew/etc/profile.d/autojump.sh # \u003c\u003c\u003c autojump initialize \u003c\u003c\u003c Use j to jump to the matching directory. bash j zsh-autosuggestionsauto-suggestion for zsh. It suggests commands based on your command history. bash git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions zsh-syntax-highlightingSyntax highlighting for zsh. It should be the last plugin in the plugins list. bash git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ","date":"2023-10-04","objectID":"/posts/macos-setup/:3:1","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#zsh-autosuggestions"},{"categories":["tricks"],"content":" PluginsEdit ~/.zshrc: bash plugins=( sudo extract autojump zsh-autosuggestions zsh-syntax-highlighting ) sudoPress ESC twice to add sudo to the beginning of the command. extractUse x abc.zip to extract abc.zip. It supports almost all compressed formats. autojump bash brew install autojump Follow the instructions to add the following line to ~/.zshrc: bash # \u003e\u003e\u003e autojump initialize \u003e\u003e\u003e [ -f /opt/homebrew/etc/profile.d/autojump.sh ] \u0026\u0026 . /opt/homebrew/etc/profile.d/autojump.sh # \u003c\u003c\u003c autojump initialize \u003c\u003c\u003c Use j to jump to the matching directory. bash j zsh-autosuggestionsauto-suggestion for zsh. It suggests commands based on your command history. bash git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions zsh-syntax-highlightingSyntax highlighting for zsh. It should be the last plugin in the plugins list. bash git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ","date":"2023-10-04","objectID":"/posts/macos-setup/:3:1","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#zsh-syntax-highlighting"},{"categories":["tricks"],"content":" ThemeI prefer the powerlevel10k theme. One can find the installation instructions here. clone the repository bash git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k Set ZSH_THEME=\"powerlevel10k/powerlevel10k\" in ~/.zshrc. Run p10k configure to configure the theme. (It will be automatically run when you open a new terminal window. I prefer not to install the recommended fonts.) ","date":"2023-10-04","objectID":"/posts/macos-setup/:3:2","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#theme"},{"categories":["tricks"],"content":" Software","date":"2023-10-04","objectID":"/posts/macos-setup/:4:0","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#software"},{"categories":["tricks"],"content":" tldrtldr is a community effort to simplify the beloved man pages with practical examples. bash brew install tldr To use it, run bash tldr \u003ccommand\u003e ","date":"2023-10-04","objectID":"/posts/macos-setup/:4:1","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#tldr"},{"categories":["tricks"],"content":" treetree is a recursive directory listing command that produces a depth indented listing of files. bash brew install tree ","date":"2023-10-04","objectID":"/posts/macos-setup/:4:2","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#tree"},{"categories":["tricks"],"content":" CondaSee conda-basics for more details. ","date":"2023-10-04","objectID":"/posts/macos-setup/:5:0","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#conda"},{"categories":["tricks"],"content":" SSHSee ssh-basics for more details. ","date":"2023-10-04","objectID":"/posts/macos-setup/:6:0","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#ssh"},{"categories":["tricks"],"content":" GitSee git-basics for more details. ","date":"2023-10-04","objectID":"/posts/macos-setup/:7:0","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#git"},{"categories":["tricks"],"content":" Useful Commands","date":"2023-10-04","objectID":"/posts/macos-setup/:8:0","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#useful-commands"},{"categories":["tricks"],"content":" Remove all .DS_Store files recursivelyDelete all .DS_Store files recursively and print the path of each deleted file: bash find . -name \".DS_Store\" -print -delete ","date":"2023-10-04","objectID":"/posts/macos-setup/:8:1","series":[],"tags":["mac"],"title":"macOS Setup","uri":"/posts/macos-setup/#remove-all-ds_store-files-recursively"},{"categories":["tricks"],"content":"Some basics about Git and GitHub. Although there are many tutorials online, I still want to record some of them here for my own reference. ","date":"2023-09-10","objectID":"/posts/git-basics/:0:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#"},{"categories":["tricks"],"content":" Some References Git and GitHub (Concise) Git ‰∏é‰ª£Á†ÅÁÆ°ÁêÜ (Good!) ","date":"2023-09-10","objectID":"/posts/git-basics/:1:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#some-references"},{"categories":["tricks"],"content":" Configure Tooling","date":"2023-09-10","objectID":"/posts/git-basics/:2:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#configure-tooling"},{"categories":["tricks"],"content":" Name and EmailConfigure user information for all local repositories: bash git config --global color.ui auto # enable helpful colorization of command line output git config --global user.name \"Your Name Here\" git config --global user.email \"your_email@youremail.com\" NOTE: your_email@@youremail.com should be the noreply email address of your GitHub account. ¬´¬´¬´\u003c HEAD ","date":"2023-09-10","objectID":"/posts/git-basics/:2:1","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#name-and-email"},{"categories":["tricks"],"content":" .gitignoreSet the global .gitignore file: bash curl https://raw.githubusercontent.com/github/gitignore/master/Global/macOS.gitignore -o ~/.gitignore Config git to use the global .gitignore file: bash git config --global core.excludesfile ~/.gitignore visit gitignore to generate a .gitignore file for your project. ","date":"2023-09-10","objectID":"/posts/git-basics/:3:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#gitignore"},{"categories":["tricks"],"content":" Git Clone======= To check your configuration, run: bash git config --list | grep user This will show your user name and email. The grep command filters the output to only show lines containing ‚Äúuser‚Äù. ","date":"2023-09-10","objectID":"/posts/git-basics/:4:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#git-clone"},{"categories":["tricks"],"content":" Default BranchConfigure your default branch: bash git config --global init.defaultBranch main This sets the default branch name to main when you create a new repository. To show the current default branch name, use: bash git config --global init.defaultBranch If this returns nothing, it means the default branch is still set to master. ","date":"2023-09-10","objectID":"/posts/git-basics/:4:1","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#default-branch"},{"categories":["tricks"],"content":" Default EditorConfigure your default editor: bash git config --global core.editor \"code --wait\" # set Visual Studio Code as the default editor Now you can run git config --global -e and use VS Code as editor for configuring Git. VS Code as Git difftool and mergetool: .gitconfig [diff] tool = default-difftool [difftool \"default-difftool\"] cmd = code --wait --diff $LOCAL $REMOTE [merge] tool = code [mergetool \"code\"] cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED More about Using Git with Visual Studio Code. ","date":"2023-09-10","objectID":"/posts/git-basics/:4:2","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#default-editor"},{"categories":["tricks"],"content":" Create RepositoriesStart a new repository or obtain one from an existing URL: ","date":"2023-09-10","objectID":"/posts/git-basics/:5:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#create-repositories"},{"categories":["tricks"],"content":" Create a new repository bash git init \u003cproject-name\u003e cd \u003cproject-name\u003e If you want to turn an existing project into a Git repository, use the following command: bash cd existing_project git init ","date":"2023-09-10","objectID":"/posts/git-basics/:5:1","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#create-a-new-repository"},{"categories":["tricks"],"content":" Clone a repositoryDownload a project and its entire version history: fe6b87b (Update timestamp command) bash git clone https://github.com/\u003cusername\u003e/\u003crepo-name\u003e.git # https git clone git@github.com:\u003cusername\u003e/\u003crepo-name\u003e.git # SSH ","date":"2023-09-10","objectID":"/posts/git-basics/:5:2","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#clone-a-repository"},{"categories":["tricks"],"content":" Make changesReview edits and craft a commit transaction: bash git add [file] # Snapshots the file in preparation for versioning git commit -m \"[descriptive message]\" # Record file snapshots permanently in version history git status # List all new or modified files to be committed git diff # Compare working directory with staging area git diff --staged # Compare staging area with the last commit (HEAD) ","date":"2023-09-10","objectID":"/posts/git-basics/:6:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#make-changes"},{"categories":["tricks"],"content":" Undo changesRevert changes. bash git reset [file] # 'unstage' a file (inverse of `git add`), no changes to file contents git checkout -- [file] # Revert the file to the last committed version, make changes to the file contents https://docs.gitlab.com/ee/topics/git/undo.html ","date":"2023-09-10","objectID":"/posts/git-basics/:7:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#undo-changes"},{"categories":["tricks"],"content":" Group ChangesName a series of commits and combine completed efforts. List branches. bash git branch # List all local branches in the local repository git branch -a # The -a flag shows all branches (local and remote) Create a new branch and switch to it. bash git branch [branch-name] # Create a new branch git checkout [branch-name] # Switch to the specified branch and update the working directory Use git switch. This command was introduced in Git 2.23 as a more user-friendly and branch-specific command for switching branches. It was created to simplify the branch-switching process and avoid some of the confusion that came with git checkout‚Äôs multiple uses. git switch [branch-name] is simpler and less error-prone when you only want to switch branches, without the risk of affecting files or the working directory. bash git switch -c [branch-name] # Create a new branch and switch to it git switch [branch-name] # Switch to the specified branch and update the working directory, similar to `git checkout` Merge changes from one branch to another. bash git merge [branch-to-merge] # Combine the specified branch's history into the current branch Delete a branch bash git branch -d \u003cbranch-name\u003e If the branch has not been merged, use -D instead of -d: bash git branch -D \u003cbranch-name\u003e ","date":"2023-09-10","objectID":"/posts/git-basics/:8:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#group-changes"},{"categories":["tricks"],"content":" Delete and Rename Files bash git rm [file] # Delete the file from the working directory and stage the deletion git rm --cached [file] # Remove the file from version control but preserve the file locally git mv [file-original] [file-renamed] # Change the file name and prepare it for a commit ","date":"2023-09-10","objectID":"/posts/git-basics/:9:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#delete-and-rename-files"},{"categories":["tricks"],"content":" Suppress TrackingExclude temporary files and paths. A text file named .gitignore suppresses accidental versioning of files and paths matching the specified patterns. bash git ls-files --others --ignored --exclude-standard # List all ignored files in this project ","date":"2023-09-10","objectID":"/posts/git-basics/:10:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#suppress-tracking"},{"categories":["tricks"],"content":" Save FragmentsShelve and restore incomplete changes. bash git stash # Temporarily store all modified tracked files git stash list # List all stashed changes git stash pop # Restore the most recently stashed files git stash drop # Discard the most recently stashed changes ","date":"2023-09-10","objectID":"/posts/git-basics/:11:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#save-fragments"},{"categories":["tricks"],"content":" Review HistoryBrowse and inspect the evolution of project files. bash git log # Show all commits in the current branch's history git log --follow [file] # List version history for a file, including renames git log --oneline # Show a compacted log with each commit on a single line git diff [first-branch]...[second-branch] # Show content differences between two branches git show [commit] # Output metadata and content changes of the specified commit ","date":"2023-09-10","objectID":"/posts/git-basics/:12:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#review-history"},{"categories":["tricks"],"content":" Redo CommitsErase mistakes and craft replacement history. bash git reset --soft [commit] # Move the HEAD to the specified commit and preserve changes in both the working directory and the staging area git reset [commit] # Equivalent to `git reset --mixed`, will move the HEAD to the specified commit, unstage changes, and preserve changes in the working directory git reset --hard [commit] # Move the HEAD to the specified commit and discard changes in the working directory and staging area ","date":"2023-09-10","objectID":"/posts/git-basics/:13:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#redo-commits"},{"categories":["tricks"],"content":" Synchronize ChangesRegister a repository bookmark and exchange version history. bash git fetch [remote repository] # Download all history from the repository bookmark git merge [remote repository]/[branch] # Combine bookmark's branch into current local branch git pull # Download bookmark history and incorporate changes git push [remote repository] [local branch] # Upload all local branch commits to GitHub ","date":"2023-09-10","objectID":"/posts/git-basics/:14:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#synchronize-changes"},{"categories":["tricks"],"content":" Fetchgit fetch is a command that retrieves the latest changes from the remote repository (e.g., on GitHub) but does not modify your local working directory or branches. It simply downloads the latest commits, branches, and other updates and stores them in your local repository, so you can inspect or apply them later. For example, bash git fetch origin This fetches all the changes from the remote repository (which is typically referred to as origin) and updates your local repository with the latest information from that remote. However, your working directory and branches remain unchanged until you decide to incorporate those changes. ","date":"2023-09-10","objectID":"/posts/git-basics/:14:1","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#fetch"},{"categories":["tricks"],"content":" MergeAfter you‚Äôve fetched updates from the remote repository, you may want to integrate them into your current branch. To do this, you use git merge. This command merges the changes from a remote branch (fetched with git fetch) into your current local branch. For example, bash git merge origin/main Here, origin/main refers to the main branch on the remote repository (origin). This command merges the changes from the remote main branch into your current branch (typically main). ","date":"2023-09-10","objectID":"/posts/git-basics/:14:2","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#merge"},{"categories":["tricks"],"content":" Pullgit pull is a shorthand command that combines git fetch and git merge into a single command. It fetches the latest changes from the remote repository and merges them into your current branch in one step. ","date":"2023-09-10","objectID":"/posts/git-basics/:14:3","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#pull"},{"categories":["tricks"],"content":" Pushgit push remote repository] [local branch] is a command that sends the commits you have made on your local branch to the corresponding branch on the remote repository. This updates the remote repository with your local changes. Here [alias] is typically the name of the remote repository (e.g., origin), and [local branch] is the name of the branch you want to push. Notice the syntax difference between git merge [remote repository/branch and git push [remote repository] [branch]. For example, bash git push origin main This command pushes the commits from your local main branch to the remote repository (origin). ","date":"2023-09-10","objectID":"/posts/git-basics/:14:4","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#push"},{"categories":["tricks"],"content":" CommitIn Git, the refers to a specific point in the history of your repository. This could be represented in a few different ways, including using the commit hash, HEAD, or other shorthand references. Let‚Äôs break down the different ways Git allows you to refer to a commit. ","date":"2023-09-10","objectID":"/posts/git-basics/:15:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#commit"},{"categories":["tricks"],"content":" Commit Hash Every commit in Git has a unique identifier, called a commit hash or SHA-1 hash. This is a 40-character long alphanumeric string that looks something like 1a2b3c4d5e6f7g8h9i0j‚Ä¶. This hash is unique to that particular commit. In most cases, you only need to use the first 7 or so characters of the hash (since that is usually enough to uniquely identify the commit). bash git checkout 1a2b3c4 ","date":"2023-09-10","objectID":"/posts/git-basics/:15:1","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#commit-hash"},{"categories":["tricks"],"content":" HEAD HEAD is a reference to the current commit that your repository is on. Think of it as a pointer to the current state of your working directory. HEAD~n refers to the commit before HEAD: HEAD~1: The commit immediately before the current one. HEAD~2: Two commits before the current one. bash git checkout HEAD HEAD always points to the latest commit on the current branch that you have checked out. ","date":"2023-09-10","objectID":"/posts/git-basics/:15:2","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#head"},{"categories":["tricks"],"content":" Branches You can use the branch name to refer to the latest commit on that branch. bash git checkout main This command switches to the latest commit on the main branch. ","date":"2023-09-10","objectID":"/posts/git-basics/:15:3","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#branches"},{"categories":["tricks"],"content":" Tags A tag is a human-readable label applied to a specific commit (typically used for marking release points). You can refer to a commit by its tag name. bash git checkout v1.0 This command switches to the commit that has the tag v1.0. ","date":"2023-09-10","objectID":"/posts/git-basics/:15:4","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#tags"},{"categories":["tricks"],"content":" Relative References HEAD^: Refers to the parent of the current commit. HEAD^2: Refers to the second parent of the current commit (for merge commits). HEAD~3: Refers to the commit three steps before the current commit. bash git checkout HEAD^ ","date":"2023-09-10","objectID":"/posts/git-basics/:15:5","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#relative-references"},{"categories":["tricks"],"content":" Go Back in Time","date":"2023-09-10","objectID":"/posts/git-basics/:16:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#go-back-in-time"},{"categories":["tricks"],"content":" Scenario AI accidentally made a commit, I have not pushed it to the server, and I don‚Äôt want the commit anymore. bash git reset HEAD~ This command resets the git history to the previous commit (one commit earlier than the current unwanted commit HEAD). ","date":"2023-09-10","objectID":"/posts/git-basics/:16:1","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#scenario-a"},{"categories":["tricks"],"content":" Scenario BI accidentally made a commit, I have already pushed it to the server, and I don‚Äôt want the commit anymore. bash git revert HEAD \u0026\u0026 git push This command creates a ‚Äúreverse commit‚Äù of the current commit, then pushes to the server to revert it. In this scenario, don‚Äôt use the solution for Scenario A, since that might create a mismatch between your repo and others‚Äô repos. ","date":"2023-09-10","objectID":"/posts/git-basics/:16:2","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#scenario-b"},{"categories":["tricks"],"content":" Scenario CI wanted to pull from the remote repo, but git says I have conflicting uncommitted changes in my working copy. And I am sure I can just get rid of those changes. bash git stash \u0026\u0026 git stash drop \u0026\u0026 git pull This command drops uncommitted changes. ","date":"2023-09-10","objectID":"/posts/git-basics/:16:3","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#scenario-c"},{"categories":["tricks"],"content":" Scenario DI wanted to pull from the remote repo, but git says I have conflicting uncommitted changes in my working copy. And I actually need to preserve my changes. bash git stash \u0026\u0026 git pull \u0026\u0026 git stash pop This command temporarily hides uncommitted changes in a stash, does the pull, and pops the changes from the stash. If your changes affect the same files that were changed on the remote repo, then things get complicated ‚Äì you will need to actually merge your changes in. Please Google for details. ","date":"2023-09-10","objectID":"/posts/git-basics/:16:4","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#scenario-d"},{"categories":["tricks"],"content":" Scenario EOne of my files got messed up just now. I want to overwrite it with the version stored in the repo. bash git checkout path/to/file This command fetches the file from HEAD and replaces that file in the working copy. ","date":"2023-09-10","objectID":"/posts/git-basics/:16:5","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#scenario-e"},{"categories":["tricks"],"content":" Scenario FOne of my files got messed up a while ago. I want to overwrite it with an earlier version in the repo. bash git checkout commit_index path/to/file This command fetches the file from the commit specified with commit_index and replaces the file in the working copy. The commit index can be found in the history of commits: git log ","date":"2023-09-10","objectID":"/posts/git-basics/:16:6","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#scenario-f"},{"categories":["tricks"],"content":" SSH Config for GitHubMake sure you have generated an SSH key pair on your local machine. ","date":"2023-09-10","objectID":"/posts/git-basics/:17:0","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#ssh-config-for-github"},{"categories":["tricks"],"content":" Add a new SSH public key to your GitHub accountSee GitHub documents ","date":"2023-09-10","objectID":"/posts/git-basics/:17:1","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#add-a-new-ssh-public-key-to-your-github-account"},{"categories":["tricks"],"content":" Test SSH connection bash ssh -T git@github.com \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD ======= text ## Some Useful Commands ### Remove all `.DS_Store` files recursively Delete all `.DS_Store` files recursively and print the path of each deleted file: ```bash find . -name \".DS_Store\" -print -delete fe6b87b (Update timestamp command) ","date":"2023-09-10","objectID":"/posts/git-basics/:17:2","series":[],"tags":["git","github","ssh"],"title":"Git Basics","uri":"/posts/git-basics/#test-ssh-connection"},{"categories":["tricks"],"content":"It is recommended to create a new environment for each project and leave the base environment untouched. In the following, we assume the environment name is cs101. ","date":"2023-08-09","objectID":"/posts/conda-basics/:0:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#"},{"categories":["tricks"],"content":" Install miniforgeSee Miniforge for more information. For Linux and macOS: bash curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\" bash Miniforge3-$(uname)-$(uname -m).sh ","date":"2023-08-09","objectID":"/posts/conda-basics/:1:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#install-miniforge"},{"categories":["tricks"],"content":" Prevent conda from activating the base environment automatically bash conda config --set auto_activate_base false ","date":"2023-08-09","objectID":"/posts/conda-basics/:2:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#prevent-conda-from-activating-the-base-environment-automatically"},{"categories":["tricks"],"content":" Add Miniforge to VS CodeAdd the following lines to settings.json: json \"python.condaPath\": \"~/miniforge/condabin/conda\", \"python.defaultInterpreterPath\": \"~/miniforge/envs/cs101/bin/python\", ","date":"2023-08-09","objectID":"/posts/conda-basics/:3:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#add-miniforge-to-vs-code"},{"categories":["tricks"],"content":" Create a New Environment bash conda create -n cs101 ","date":"2023-08-09","objectID":"/posts/conda-basics/:4:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#create-a-new-environment"},{"categories":["tricks"],"content":" Activate an Environment bash conda activate cs101 ","date":"2023-08-09","objectID":"/posts/conda-basics/:5:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#activate-an-environment"},{"categories":["tricks"],"content":" Install common packages for scientific computing bash conda install -y numpy matplotlib scipy pandas sympy jupyterlab ipykernel ipywidgets pytest numba plotly ","date":"2023-08-09","objectID":"/posts/conda-basics/:6:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#install-common-packages-for-scientific-computing"},{"categories":["tricks"],"content":" Use pip to install packages not available in Anaconda bash pip install rocket-fft ","date":"2023-08-09","objectID":"/posts/conda-basics/:7:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#use-pip-to-install-packages-not-available-in-anaconda"},{"categories":["tricks"],"content":" Install local modules/packages bash pip install -e . In this way, the package will be installed in the current environment and the changes will be reflected immediately. ","date":"2023-08-09","objectID":"/posts/conda-basics/:8:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#install-local-modulespackages"},{"categories":["tricks"],"content":" Deactivate an Environment bash conda deactivate ","date":"2023-08-09","objectID":"/posts/conda-basics/:9:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#deactivate-an-environment"},{"categories":["tricks"],"content":" List All Environments bash conda env list ","date":"2023-08-09","objectID":"/posts/conda-basics/:10:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#list-all-environments"},{"categories":["tricks"],"content":" Remove an Environment bash conda remove -n cs101 --all ","date":"2023-08-09","objectID":"/posts/conda-basics/:11:0","series":[],"tags":["conda","python"],"title":"Conda Basics","uri":"/posts/conda-basics/#remove-an-environment"},{"categories":["tricks"],"content":"SSH is a protocol that allows you to connect to a remote computer. It is widely used in remote computing, such as connecting to a remote server or running Jupyter Lab in a remote host. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:0:0","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#"},{"categories":["tricks"],"content":" Create an SSH key pairThe following steps are adapted from the Generating a new SSH key and adding it to the ssh-agent. The procedure has been tested on macOS Sequoia. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:1:0","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#create-an-ssh-key-pair"},{"categories":["tricks"],"content":" Check for existing SSH keysFirst check for existing SSH keys on your computer by running: bash ls -al ~/.ssh # Lists the files in your .ssh directory, if they exist Check the directory listing to see if you have files named either id_ed25519.pub or id_ed25519.pub. If you don‚Äôt have either of those files then read on, otherwise skip the next section. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:1:1","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#check-for-existing-ssh-keys"},{"categories":["tricks"],"content":" Generate a new SSH keyOpen Terminal. Paste the text below, substituting in your GitHub email address. This creates a new ssh key, using the provided email as a label. bash ssh-keygen -t ed25519 -C \"your_email@example.com\" ","date":"2023-08-09","objectID":"/posts/ssh-basics/:1:2","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#generate-a-new-ssh-key"},{"categories":["tricks"],"content":" Add your SSH key to the ssh-agentUse ssh-agent and ssh-add to manage your SSH keys. The ssh-agent is a program that runs in the background and stores your SSH keys. This allows you to use your SSH keys without having to enter your passphrase every time. ssh-add is a command that adds your SSH private key to the running ssh-agent. Start the ssh-agent in the background. Add your SSH private key to the ssh-agent. Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file. bash ssh-add --apple-use-keychain ~/.ssh/id_ed25519 To automatically load your keys into the ssh-agent on login, add the following lines to your ~/.ssh/config file: bash Host * AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/id_ed25519 To open your ~/.ssh/config file with vscode, use the command: bash code ~/.ssh/config ","date":"2023-08-09","objectID":"/posts/ssh-basics/:1:3","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#add-your-ssh-key-to-the-ssh-agent"},{"categories":["tricks"],"content":" One-Time Setup for Passwordless SSHThe high level idea is to generate a key pair on your local machine, copy the public key to the remote host (Adding it to the ~/.ssh/authorized_keys file), and then test the connection. This allows you to connect to the remote host without entering a password each time. On local machine, generate a key pair using ssh-keygen. Copy the public key to the remote host‚Äôs ~/.ssh/authorized_keys file. bash ssh-copy-id \u003cusername\u003e@\u003chostname\u003e Or manually copy the public key to the remote host, appending it to the ~/.ssh/authorized_keys file, and set the appropriate permissions: bash cat ~/.ssh/id_ed25519.pub | ssh \u003cusername\u003e@\u003chostname\u003e 'mkdir -p ~/.ssh \u0026\u0026 cat \u003e\u003e ~/.ssh/authorized_keys \u0026\u0026 chmod 700 ~/.ssh \u0026\u0026 chmod 600 ~/.ssh/authorized_keys' Test the SSH connection to the remote host. bash ssh \u003cusername\u003e@\u003chostname\u003e If no password is required, the setup is successful. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:2:0","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#one-time-setup-for-passwordless-ssh"},{"categories":["tricks"],"content":" SSH Access to Windows","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:0","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#ssh-access-to-windows"},{"categories":["tricks"],"content":" Creating an SSH Key in Local SSH ClientFor a detailed explanation, refer to my previous post. In summary: Generate a key pair in the local SSH client. Activate the ssh-agent and link the private key to it. In Windows, this process can be executed in PowerShell: powershell # Generate a key pair ssh-keygen -t ed25519 # By default, the ssh-agent service is disabled. Configure it to start automatically. Ensure you're running as an Administrator. Get-Service ssh-agent | Set-Service -StartupType Automatic # Activate the service Start-Service ssh-agent # This should return a status of Running Get-Service ssh-agent # Load your key files into ssh-agent ssh-add $env:USERPROFILE\\.ssh\\id_ed25519 ","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:1","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#creating-an-ssh-key-in-local-ssh-client"},{"categories":["tricks"],"content":" Starting SSHD on the Remote Host powershell # Set the sshd service to start automatically Get-Service -Name sshd | Set-Service -StartupType Automatic # Activate the sshd service Start-Service sshd ","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:2","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#starting-sshd-on-the-remote-host"},{"categories":["tricks"],"content":" Deploying the Public Key to the Remote HostYour public key, \\.ssh\\id_ed25519.pub, should be placed on the server in a text file named administrators_authorized_keys located in C:\\ProgramData\\ssh\\. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:3","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#deploying-the-public-key-to-the-remote-host"},{"categories":["tricks"],"content":" Configuring the default shell for OpenSSH in WindowsFor example, to use PowerShell as the default shell: powershell New-ItemProperty -Path \"HKLM:\\SOFTWARE\\OpenSSH\" -Name DefaultShell -Value \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -PropertyType String -Force ","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:4","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#configuring-the-default-shell-for-openssh-in-windows"},{"categories":["tricks"],"content":" Windows ConfigurationsIn Windows, sshd reads configuration data from `%programdata%\\ssh\\sshd_config`` by default. You can modify the configuration file to change the default port, for example: powershell # Port 22 is the default port for SSH Port 22 You can also disable password authentication to prevent brute-force attacks: powershell # Disable password authentication PasswordAuthentication no You can enable public key authentication: powershell # Enable public key authentication PubkeyAuthentication yes ","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:5","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#windows-configurations"},{"categories":["tricks"],"content":" Connecting to Windows in terminal bash ssh \u003cusername\u003e@\u003chostname\u003e ","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:6","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#connecting-to-windows-in-terminal"},{"categories":["tricks"],"content":" Connecting to Windows in VS CodeTo connect, you need to know the username and hostname of the remote host. Determining the UsernameThe username typically matches the account name of the remote host, retrievable by: powershell echo $env:USERNAME However, if you‚Äôre using a Microsoft account to log in, the username might be the associated email address. Determining the HostnameThe hostname, which is the IP address of the remote host, can be retrieved with: powershell ipconfig If it doesn‚Äôt workTry enable Port 22 powershell netsh advfirewall firewall add rule name=\"Open SSH Port 22\" dir=in action=allow protocol=TCP localport=22 remoteip=any Try enabling Remote server listen on socket in VS Code. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:7","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#connecting-to-windows-in-vs-code"},{"categories":["tricks"],"content":" Connecting to Windows in VS CodeTo connect, you need to know the username and hostname of the remote host. Determining the UsernameThe username typically matches the account name of the remote host, retrievable by: powershell echo $env:USERNAME However, if you‚Äôre using a Microsoft account to log in, the username might be the associated email address. Determining the HostnameThe hostname, which is the IP address of the remote host, can be retrieved with: powershell ipconfig If it doesn‚Äôt workTry enable Port 22 powershell netsh advfirewall firewall add rule name=\"Open SSH Port 22\" dir=in action=allow protocol=TCP localport=22 remoteip=any Try enabling Remote server listen on socket in VS Code. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:7","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#determining-the-username"},{"categories":["tricks"],"content":" Connecting to Windows in VS CodeTo connect, you need to know the username and hostname of the remote host. Determining the UsernameThe username typically matches the account name of the remote host, retrievable by: powershell echo $env:USERNAME However, if you‚Äôre using a Microsoft account to log in, the username might be the associated email address. Determining the HostnameThe hostname, which is the IP address of the remote host, can be retrieved with: powershell ipconfig If it doesn‚Äôt workTry enable Port 22 powershell netsh advfirewall firewall add rule name=\"Open SSH Port 22\" dir=in action=allow protocol=TCP localport=22 remoteip=any Try enabling Remote server listen on socket in VS Code. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:7","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#determining-the-hostname"},{"categories":["tricks"],"content":" Connecting to Windows in VS CodeTo connect, you need to know the username and hostname of the remote host. Determining the UsernameThe username typically matches the account name of the remote host, retrievable by: powershell echo $env:USERNAME However, if you‚Äôre using a Microsoft account to log in, the username might be the associated email address. Determining the HostnameThe hostname, which is the IP address of the remote host, can be retrieved with: powershell ipconfig If it doesn‚Äôt workTry enable Port 22 powershell netsh advfirewall firewall add rule name=\"Open SSH Port 22\" dir=in action=allow protocol=TCP localport=22 remoteip=any Try enabling Remote server listen on socket in VS Code. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:3:7","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#if-it-doesnt-work"},{"categories":["tricks"],"content":" SSH Access to WSL2For a comprehensive guide, refer here. Since Windows uses port 22 by default for SSH, consider changing the SSH port in WSL2 to 2222 to prevent conflicts. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:4:0","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#ssh-access-to-wsl2"},{"categories":["tricks"],"content":" On the Remote Host (WSL2) bash # Install openssh-server sudo apt install openssh-server # Modify the SSH configuration to use port 2222 sudo sed -i -E 's,^#?Port.*$,Port 2222,' /etc/ssh/sshd_config sudo service ssh restart # Allow passwordless sudo for the current user to start the SSH service sudo sh -c \"echo '${USER} ALL=(root) NOPASSWD: /usr/sbin/service ssh start' \u003e/etc/sudoers.d/service-ssh-start\" # Start the SSH service without requiring a password sudo /usr/sbin/service ssh start ","date":"2023-08-09","objectID":"/posts/ssh-basics/:4:1","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#on-the-remote-host-wsl2"},{"categories":["tricks"],"content":" On the Remote Host (Windows) Unblock Port 2222 powershell New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd) for WSL' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 2222 Automatically Start SSHD ServiceCreate a CMD script to initiate the SSHD service in WSL2. cmd @echo off setlocal C:\\Windows\\System32\\bash.exe -c \"sudo /usr/sbin/service ssh start\" C:\\Windows\\System32\\netsh.exe interface portproxy delete v4tov4 listenport=2022 listenaddress=0.0.0.0 protocol=tcp for /f %%i in ('wsl hostname -I') do set IP=%%i C:\\Windows\\System32\\netsh.exe interface portproxy add v4tov4 listenport=2022 listenaddress=0.0.0.0 connectport=2022 connectaddress=%IP% endlocal ","date":"2023-08-09","objectID":"/posts/ssh-basics/:4:2","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#on-the-remote-host-windows"},{"categories":["tricks"],"content":" On the Remote Host (Windows) Unblock Port 2222 powershell New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd) for WSL' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 2222 Automatically Start SSHD ServiceCreate a CMD script to initiate the SSHD service in WSL2. cmd @echo off setlocal C:\\Windows\\System32\\bash.exe -c \"sudo /usr/sbin/service ssh start\" C:\\Windows\\System32\\netsh.exe interface portproxy delete v4tov4 listenport=2022 listenaddress=0.0.0.0 protocol=tcp for /f %%i in ('wsl hostname -I') do set IP=%%i C:\\Windows\\System32\\netsh.exe interface portproxy add v4tov4 listenport=2022 listenaddress=0.0.0.0 connectport=2022 connectaddress=%IP% endlocal ","date":"2023-08-09","objectID":"/posts/ssh-basics/:4:2","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#unblock-port-2222"},{"categories":["tricks"],"content":" On the Remote Host (Windows) Unblock Port 2222 powershell New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd) for WSL' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 2222 Automatically Start SSHD ServiceCreate a CMD script to initiate the SSHD service in WSL2. cmd @echo off setlocal C:\\Windows\\System32\\bash.exe -c \"sudo /usr/sbin/service ssh start\" C:\\Windows\\System32\\netsh.exe interface portproxy delete v4tov4 listenport=2022 listenaddress=0.0.0.0 protocol=tcp for /f %%i in ('wsl hostname -I') do set IP=%%i C:\\Windows\\System32\\netsh.exe interface portproxy add v4tov4 listenport=2022 listenaddress=0.0.0.0 connectport=2022 connectaddress=%IP% endlocal ","date":"2023-08-09","objectID":"/posts/ssh-basics/:4:2","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#automatically-start-sshd-service"},{"categories":["tricks"],"content":" Connecting to WSL2 bash ssh -p 2222 \u003cusername\u003e@\u003chostname\u003e Note that the username here is distinct from the Windows host username; it pertains to the Linux system. Determine it using: bash whoami The hostname, however, remains consistent with the Windows host. VS Code Remote - SSHEdit the ~/.ssh/config on the local client: bash Host \u003chostname\u003e HostName \u003cnickname_windows\u003e User \u003cusername_windows\u003e Port 22 Host \u003chostname\u003e HostName \u003cnickname_wsl\u003e User \u003cusername_wsl\u003e Port 2222 ","date":"2023-08-09","objectID":"/posts/ssh-basics/:4:3","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#connecting-to-wsl2"},{"categories":["tricks"],"content":" Connecting to WSL2 bash ssh -p 2222 @ Note that the username here is distinct from the Windows host username; it pertains to the Linux system. Determine it using: bash whoami The hostname, however, remains consistent with the Windows host. VS Code Remote - SSHEdit the ~/.ssh/config on the local client: bash Host HostName User Port 22 Host HostName User Port 2222 ","date":"2023-08-09","objectID":"/posts/ssh-basics/:4:3","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#vs-code-remote---ssh"},{"categories":["tricks"],"content":" Running Jupyter Lab on a Remote HostUse ssh to run jupyter lab on a remote host and access it from a local browser. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:5:0","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#running-jupyter-lab-on-a-remote-host"},{"categories":["tricks"],"content":" Redirect Traffic from Remote Port to Local PortIf you designate \u003cremote_port\u003e for the remote and \u003clocal_port\u003e for the local, redirect the traffic as: powershell ssh -L \u003clocal_port\u003e:localhost:\u003cremote_port\u003e \u003cusername\u003e@\u003chostname\u003e ","date":"2023-08-09","objectID":"/posts/ssh-basics/:5:1","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#redirect-traffic-from-remote-port-to-local-port"},{"categories":["tricks"],"content":" Running Jupyter Lab on the Remote Host powershell jupyter lab --no-browser --port=\u003cremote_port\u003e ","date":"2023-08-09","objectID":"/posts/ssh-basics/:5:2","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#running-jupyter-lab-on-the-remote-host"},{"categories":["tricks"],"content":" Using croc to Transfer FilesFor more details, consult this link. ","date":"2023-08-09","objectID":"/posts/ssh-basics/:6:0","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#using-croc-to-transfer-files"},{"categories":["tricks"],"content":" On the Local MachineNavigate to the directory you wish to sync: bash croc send --code \u003ccode\u003e . ","date":"2023-08-09","objectID":"/posts/ssh-basics/:6:1","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#on-the-local-machine"},{"categories":["tricks"],"content":" On the Remote MachineTo receive the files: bash croc --yes --overwrite \u003ccode\u003e ","date":"2023-08-09","objectID":"/posts/ssh-basics/:6:2","series":[],"tags":["ssh","vscode"],"title":"SSH Basics","uri":"/posts/ssh-basics/#on-the-remote-machine"},{"categories":null,"content":" Who am I? üéì A graduate student in Physics ü§î Keen on learning the mechanism of the world ‚ù§Ô∏è Á©∑‰∏îÁõäÂùöÔºå‰∏çÂù†Èùí‰∫ë‰πãÂøó ÊªïÁéãÈòÅÂ∫è Êó∂Ëøê‰∏çÈΩêÔºåÂëΩÈÄîÂ§öËàõ„ÄÇÂÜØÂîêÊòìËÄÅÔºåÊùéÂπøÈöæÂ∞Å„ÄÇÂ±àË¥æË∞ä‰∫éÈïøÊ≤ôÔºåÈùûÊó†Âú£‰∏ªÔºõÁ™úÊ¢ÅÈ∏ø‰∫éÊµ∑Êõ≤ÔºåÂ≤Ç‰πèÊòéÊó∂ÔºüÊâÄËµñÂêõÂ≠êËßÅÊú∫ÔºåËææ‰∫∫Áü•ÂëΩ„ÄÇËÄÅÂΩìÁõäÂ£ÆÔºåÂÆÅÁßªÁôΩÈ¶ñ‰πãÂøÉÔºüÁ©∑‰∏îÁõäÂùöÔºå‰∏çÂù†Èùí‰∫ë‰πãÂøóÈÖåË¥™Ê≥âËÄåËßâÁàΩÔºåÂ§ÑÊ∂∏Ëæô‰ª•ÁäπÊ¨¢„ÄÇÂåóÊµ∑ËôΩËµäÔºåÊâ∂ÊëáÂèØÊé•Ôºõ‰∏úÈöÖÂ∑≤ÈÄùÔºåÊ°ëÊ¶ÜÈùûÊôö„ÄÇÂ≠üÂ∞ùÈ´òÊ¥ÅÔºåÁ©∫‰ΩôÊä•ÂõΩ‰πãÊÉÖÔºõÈòÆÁ±çÁåñÁãÇÔºåÂ≤ÇÊïàÁ©∑ÈÄî‰πãÂì≠ÔºÅ ÂãÉÔºå‰∏âÂ∞∫ÂæÆÂëΩÔºå‰∏Ä‰ªã‰π¶Áîü„ÄÇÊó†Ë∑ØËØ∑Áº®ÔºåÁ≠âÁªàÂÜõ‰πãÂº±ÂÜ†ÔºõÊúâÊÄÄÊäïÁ¨îÔºåÊÖïÂÆóÊÇ´‰πãÈïøÈ£é„ÄÇËàçÁ∞™Á¨è‰∫éÁôæÈæÑÔºåÂ•âÊô®Êòè‰∫é‰∏áÈáå„ÄÇÈùûË∞¢ÂÆ∂‰πãÂÆùÊ†ëÔºåÊé•Â≠üÊ∞è‰πãËä≥ÈÇª„ÄÇ‰ªñÊó•Ë∂ãÂ∫≠ÔºåÂè®Èô™È≤§ÂØπÔºõ‰ªäÂÖπÊçßË¢ÇÔºåÂñúÊâòÈæôÈó®„ÄÇÊù®ÊÑè‰∏çÈÄ¢ÔºåÊäöÂáå‰∫ëËÄåËá™ÊÉúÔºõÈíüÊúüÊó¢ÈÅáÔºåÂ•èÊµÅÊ∞¥‰ª•‰ΩïÊÉ≠Ôºü ","date":"2021-08-16","objectID":"/about/:1:0","series":null,"tags":null,"title":"About fakephysicist","uri":"/about/#who-am-i"},{"categories":["tossing"],"content":"In this post, I will show you how to build a personal website with Hugo and configure the theme DoIt. ","date":"2021-01-01","objectID":"/posts/build-a-personal-website-with-hugo/:0:0","series":[],"tags":["hugo","doit"],"title":"Build a Personal Website with Hugo","uri":"/posts/build-a-personal-website-with-hugo/#"},{"categories":["tossing"],"content":" Quick StartInstall Hugo In macOS, you can use Homebrew to install Hugo. bash brew install hugo Then add the theme DoIt as a submodule of the hugo project. Create a new hugo project: bash hugo new site my_website cd my_website Initialize your project directory as a git repository, and add the theme repository as a submodule of your website directory: bash git init git submodule add https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt Initialize the project: git submodule update --init --recursive, and finish the installation. Update the submodule: git submodule update --remote --merge. Create your first post! hugo new posts/hello-world.md. Preview your website: hugo server --disableFastRender -D. bash . ‚îú‚îÄ‚îÄ archetypes # markdown templates ‚îú‚îÄ‚îÄ assets # assets used to generate the website ‚îú‚îÄ‚îÄ content # website content, mainly posts ‚îú‚îÄ‚îÄ data # data files used to generate the website ‚îú‚îÄ‚îÄ public # static files generated by hugo, mainly publish this ‚îú‚îÄ‚îÄ resources # resources generated by hugo, not sure what it is ‚îú‚îÄ‚îÄ static # static files, e.g. images, thumbnails, etc. ‚îú‚îÄ‚îÄ themes # hugo themes ‚îî‚îÄ‚îÄ hugo.toml # configuration file hugo.toml: The configuration of Hugo, including the configuration of the theme. See here for details. content: Save the content of the website, such as posts. bash . ‚îî‚îÄ‚îÄ content ‚îî‚îÄ‚îÄ about | ‚îî‚îÄ‚îÄ index.md // \u003c- \u003chttps://example.com/about/\u003e ‚îú‚îÄ‚îÄ posts | ‚îú‚îÄ‚îÄ firstpost.md // \u003c- \u003chttps://example.com/posts/firstpost/\u003e | ‚îú‚îÄ‚îÄ happy | | ‚îî‚îÄ‚îÄ ness.md // \u003c- \u003chttps://example.com/posts/happy/ness/\u003e | ‚îî‚îÄ‚îÄ secondpost.md // \u003c- \u003chttps://example.com/posts/secondpost/\u003e ‚îî‚îÄ‚îÄ quote ‚îú‚îÄ‚îÄ first.md // \u003c- \u003chttps://example.com/quote/first/\u003e ‚îî‚îÄ‚îÄ second.md // \u003c- \u003chttps://example.com/quote/second/\u003e archetypes: Save the markdown templates of the posts, usually including the front matter of the posts. static: Save the static files used in the posts, these files will be copied to the public folder when generating the website. public: The static HTML, CSS, JS, etc. generated by the hugo command. This folder is mainly published on the server. ","date":"2021-01-01","objectID":"/posts/build-a-personal-website-with-hugo/:1:0","series":[],"tags":["hugo","doit"],"title":"Build a Personal Website with Hugo","uri":"/posts/build-a-personal-website-with-hugo/#quick-start"},{"categories":["tossing"],"content":" DeployWe can create two repositories on GitHub to deploy the website. Repository 1: A repository used to host the source files of the website project, set the permission to Private. We will spend most of our time on this repository. Repository 2: A repository used to host the static files generated by the website, set the permission to Public. The name of this repository should be {{your_github_username}}.github.io. For example, my GitHub username is fakephysicist, then the name of the repository I need to create is fakephysicist.github.io. In the settings of this repository, enable GitHub Pages, set Branch to main, and set the static file location to /(root). We will directly push the contents of the public folder generated by the hugo command to the / directory of the main branch. Create these two repositories on GitHub, and then follow the steps below to deploy the website. In the my_website directory, execute git submodule update --init --recursive to update the submodules to the latest state. In hugo.toml, set baseurl = https://fakephysicist.github.io/. Set the fakephysicist.github.io repository as a submodule and set it in the public folder. bash git submodule add -f -b main \u003chttps://github.com/fakephysicist/fakephysicist.github.io.git\u003e public Generate the website, and push the generated website to repository 2. bash hugo cd public git add . git commit -m \"Build website\" git push origin main cd .. Add, commit and push repository 1. bash git add . git commit -m \"Publish website\" git push -u origin master Next time you want to update the website, just execute the following script deploy.sh. bash #!/bin/bash set -e # Optional: Custom commit message commit_msg=${1:-\"Update site\"} # Step 1: Ensure you're in the root of the Git repo if [ ! -d \".git\" ]; then echo \"‚ùå You must run this script from the root of the Git repository.\" exit 1 fi # Step 2: Update the submodule if it's not initialized if [ ! -d \"public/.git\" ]; then echo \"‚û°Ô∏è Initializing submodule...\" git submodule update --init --recursive fi # Step 3: Pull latest from GitHub Pages branch (optional, but safe) echo \"üîÑ Updating submodule content...\" cd public git checkout main git pull origin main cd .. # Step 4: Generate the site into public/ echo \"üèó Running Hugo to build the site...\" hugo # Step 5: Commit \u0026 push changes in public submodule cd public git add . if git diff --cached --quiet; then echo \"‚úÖ No changes in public to commit.\" else git commit -m \"$commit_msg\" git push origin main echo \"‚úÖ Pushed updates to GitHub Pages repo.\" fi cd .. # Step 6: Commit \u0026 push changes in main repo (content, config, etc.) git add . if git diff --cached --quiet; then echo \"‚úÖ No changes in main repo to commit.\" else git commit -m \"$commit_msg\" git push origin main echo \"‚úÖ Pushed changes to main repository.\" fi echo \"üöÄ Deployment complete!\" If this script is saved in the root directory of the project, you can run it with the following command: bash bash deploy.sh \"\u003cyour commit message\u003e\" ","date":"2021-01-01","objectID":"/posts/build-a-personal-website-with-hugo/:2:0","series":[],"tags":["hugo","doit"],"title":"Build a Personal Website with Hugo","uri":"/posts/build-a-personal-website-with-hugo/#deploy"},{"categories":["tossing"],"content":" Get current timestamp bash date +'%Y-%m-%dT%H:%M:%S%z' | sed 's/\\(..\\)$/:\\1/' One can use the above command to get the current timestamp in the format of 2024-08-04T14:20:29-07:00. This timestamp can be used in the front matter of the posts. yaml date: 2021-01-01T02:43:06-05:00 lastmod: 2024-08-04T14:20:29-07:00 ","date":"2021-01-01","objectID":"/posts/build-a-personal-website-with-hugo/:3:0","series":[],"tags":["hugo","doit"],"title":"Build a Personal Website with Hugo","uri":"/posts/build-a-personal-website-with-hugo/#get-current-timestamp"},{"categories":null,"content":" Stay","date":"0001-01-01","objectID":"/love/:0:0","series":null,"tags":null,"title":"","uri":"/love/#stay"},{"categories":null,"content":" Since 2019/8/14","date":"0001-01-01","objectID":"/since/:0:0","series":null,"tags":null,"title":"","uri":"/since/#since-2019814"},{"categories":null,"content":" You have been here for ","date":"0001-01-01","objectID":"/since/:1:0","series":null,"tags":null,"title":"","uri":"/since/#you-have-been-here-for"},{"categories":null,"content":" You are not connected to the Internet, only cached pages are available. ","date":"0001-01-01","objectID":"/offline/:0:0","series":null,"tags":null,"title":"Offline","uri":"/offline/#"}]